      Next up:  A brief history of Leap Seconds
      
      John Dalziel
      
      >> Hello, welcome to stage B.  We have more talks for you.  And you feel like standing up on stage as something you could do and say somebody else's name and introduce them as they're about to start, standing on the stage with the microphone and talking, around 2:30 you have a job you can do.  And you would like to volunteer to help the stages out, looking for people doing heralding, this kind of thing.  People also working in the back and working on the tech side.  So, in particular in this tent from about 2:30 today it would be real nice if we could all get lunch.  And if any of you are interested in things like that or the other volunteering tasks, then just check out the website and there's a link for how you sign up and the individual shift that need to be covered and done.  And you can go to the volunteer tent if you need help navigating the website.  There's a little bit of user face improvement that could be done on it
      But to the main reason we're here, we are with John to talk about leap seconds.  So, let's all welcome John.
      [ Applause ]
      JOHN: I'm going to approach today.  I'm going to be talking about leap seconds.  Is my audio okay?  We're going to be talking about leap seconds.  When I talk about leap seconds I get kind of one of these reactions.  The whole, nobody cares.  The average person on the street has probably never heard of it.  But what we find is if you're working with computers, it come up again and again and again.  Frontend programmers don't care.  They're not interested.  Backend engineers, they've always got a horror story of some kind, but it's the network engineers that really feel it.
      They're the ones that are booking holiday in June and December because they don't want to be around.  Cloud DevOps has gone a little bit different.  They have their smearing thing.  They're happy, they're cool.  The astronomer are hands off my leap seconds, they're quite vehement about that.  I'm going to define a leap second.  If you are not familiar with it, at least we have some frame of reference for what we're talking about.
      And then try to get into the weeds of why we have these things and actually why do we put ourselves through this sometimes?  Because there's some competing reasons for why you would want to have this thing.  And then go into how it gets propagated and out to all the systems that we can use.  And we'll look at some of the problems and how we solve some of those problems.
      And so, let's try and have a basic definition of what a leap second is.  If you have never come across it, it is a 1 second adjustment to the clock on your computer.  It sounds fairly trivial and simple.  It turns out in practice that's less often the case.
      So, here's an example of what one would look like.  So, if your clock inside your computer is ticking away and it has 60 seconds in a minute, which you would expect.  That goes from 0 to 59 and round again from 0 to 59.  In the case of a leap second, you have a 60.  You have 61 seconds in your minute.  You will see on the righthand side, the red one.  That's your leap second going in.  It's entirely possible you could have a negative leap second.  We've never had one.  But in practice, they would look like that.  So, it would get to 58, it would skip and then go to zero.
      So, we've had about  sorry, 27 of these over the course of the last 30odd years.  Well, probably longer than that.  40odd years.  Since 1972.  The last one was a couple years ago.  They tend to happen at the end of June and at the end of December.  But they can happen at any month.  But they try and keep them relatively spaced apart.  But the spec allows them to be any month.
      So, we have trouble with them.  Almost every time we come around there's some problems.  And this was in I think the three leap seconds ago we had this and Linus was saying, yep.  We always find something.  There's so many different intercompeting systems that we come across.  I tried to pull examples together.  This was the 2008 leap second.  Oracle and Sun had issues.  This was 2012.  Hit a lot of news sites.  Java and Red Hat had problems, in 2013, Twitter and Android.  You can find examples.  Most recent one was Cloud Flare's DNS.  Some of the problems with the language, couldn't process it.
      So, we have problems with them.  And so, we have to think  why do we put ourselves through this.?  Why do we want the leap second to be in there?  Let's look at why we want them.
      The way to approach this is to look at how we measure time.  We have two competing ways of measuring time.  The way we've measured it for years and years and years, all the calendar systems and the hunters/gathers looked at the Sun across the sky and the day and night cycle is how you would imagine your day is.  But the observable day, as we put it.  So, it's what you can see in the sky.  So, that's what most people's definition of a day is, actually.  You can do this yourself.  It's one of the simplest experiments in the world.  You put a stick in the ground, need a flat surface.  And the sun tracks and casts a shadow.  And this particular one I took in  this is almost Greenwich meantime.  Someone's painted around the ground as it's gone around.  But we have way better ways of tracking it than my bullard.
      We have the international reference service.  Their job is to track what the Earth is doing in the sky.  They do they tracking quasars, very faraway phenomenon.  What the actual rotation of the Earth is from what you would imagine it to be.  They produced three time scales.  For our purpose, UT is the one we're going to look at today.  The other way you can measure time, or more recently, since the 1950s.
      we have atomic clocks.  They are measuring cesium atoms.  You can have a clock here, or you could have a clock in the International Space Station or a clock in Australia and you're all measuring the same phenomenon.  So, you'll get the same frequency standard.
      So, there's a few pictures of atomic clocks.  From NPL.  The ones from the 1950s in the top.  Still very accurate.  But we've gotten more and more accurate as the years have gone by.  If I bumped into a chat, I put the tent away just like ten minutes ago.  And he worked at NPL and said there's a better clock on the way, a standard, which is interesting.  That's classic EMF.
      So, atomic time is put together by the international bureau of weights and measures.  They look after the SI second and after all of the SI units.  They're based in Paris.  And the way  in terms of time keeping, they look after three time scales and we'll get into those in a second.  But if you compare atomic time with universal time, the Earth isn't terribly accurate.  It wobbles around quite a lot and has cycles.  But for precise time keep, something you need for computing, the Earth is no longer useful to us in that respect.  It is useful depending on what you're looking at.  If you're an astronomer, you want to know exactly where the Earth is.  If you're working in sort of mapping or things that have, you'll definitely want to know those.  But you have competing standards of what the definition of the day is.
      Those two things are being pulled apart.  This became a problem in the 1970s and then we standardized our global time scale for the Earth.  And that's universal coordinated time.  So, it's the time standard that we use for communicating or for making sure that the time that we have here is also the time in Australia, it's the time all around the world.  So, UTC time is the same everywhere.  And it's a bit of a compromise between those two time scales that we're talking about.  So, it's an atomic time scale, but has discontinuities, and those are leap seconds.
      And what we try to do with UTC is keep the UTC close to what the Earth is doing.  So, it's an atomic time scale.  It's still measuring SI second.  But it keeps to what the Earth is doing by having these leap seconds inserted into it to steer it close to what UT wanted.  So, here's an example of the leap seconds when they have been applied.  You can see it's not a regular thing.  Leap seconds come when you need them, and they're done in order to keep atomic time  well, an atomic time scale, but still allow us to have it tie up with what you see in the sky.
      And so, the way this works is the people we spoke about early on, the international Earth rotation reference, the IRS, they are looking at UTC as well.  When they see that it's differing by about .6 of a second, they apply the leap second.  Leap second you normally get six months' advance warning on and announced in the IE RS bulletin.  That's why we need them, because we're trying to keep the Earth and the Earth's rotation in line with our time keeping system.  So, how do you make one?
      Again, it's called coordinated time.  That's quite well named.  It's a coordinated effort.  There's an awful lot of bodies to make it work.  It's a telecom speck.  UTC is defined by the international telecoms unit and they debate it often.  The legwork is done in Paris by the BIPM.  They  I'll get into that in a second.  But the leap seconds from the IERS.  You have three bodies really involved in this thing.  But how it's actually done daytoday, there's 70 measurement labs around the world in very different places.  What they're doing, those labs have atomic clocks in them and the information from the atomic clocks are sent to Paris and they're pulled together  actually, firstly, the UK one is in Teddington, NPL.  They produce their own time scale.  The UK will be UTC, brackets, NPL.  And that's the UK's realization of the UTC.
      And they have commercial atomic clocks, but they have this as well.  This is sort of the primary frequency standard.  This is very, very, very accurate clock.  And it's really  this is for tracking what the SI second is or trying to keep it as close to the SI second as you can.
      So, it's important to me that the definition of an atomic  commercial atomic clocks as you may have seen, those are not as accurate as this kind of thing.  But those  all the atomic clocks in the labs around the world send the data to Paris.  Paris crunches the data and produced free atomic time.  Free atomic time is the first time scale, it's not really used.  The next step in the process is to create international atomic time.  And they use the primary frequency standards to steer all of those clocks closer to what the SI second actually is.  That's the massaging process, and from that, you get international atomic time.  Once you have that one, then you can apply the leap seconds from the International Earth rotation and reference service and you have UTC.  Also, it got me.
      And those get announced monthly.  All of that processing is pulled in and monthly you will  they publish the big long list of what UTC versus the offsets from all the different labs all around the world.  So, let's go back to the labs.  And the labs use that as a course correction for them to get their clocks back into line with what UTC is.  What's maybe not obvious if you kind of come across UTC, you may assume it's all mapped out in advance, but it's laid down in arrears.  It's not a realtime thing.  This is quite surprising.  Because this is the standard for all time keeping in  on Earth.
      And it's not  you can't project ahead.  It's all been laid down behind us.  The closest you can get to a realtime representation of UTC is to actually go to your local lab.  In our case it would be NPL.  Go to them.  They have a server and give the UTC.  That's our local realization of it.  And that's in there for the slides.  If you come at this later, that might make sense.  But that's the system for how you get UTC in leap seconds.  Now we have them, how do we get them out to the world?  All the computers in the world and all the systems in the world are for the most part are running some version of UTC.  So, you've got radios were used originally.  I don't have an awful lot of information on the radios.  I won't get into that.
      But most commonly these days it will be something like GPS or over the Internet with NTP.  GPS has its own timing system, but it has offsets from UTC.  And those are picked up by stations and that's how UTC has been propagated over those systems.  And then NPP, usually it will be  there's any number of ways to get NTP hooked up, but you need a standard where UTC is, and NTP is sent over the wire and syncs with your computer.  There's a couple flags in NTP that tell you in the leap second is coming.  NTP can be a bit wobbly, there are lots of implementations.  Precision time protocol.  I like this.  This is a precision time scale.  It tracks atom time and has offsets.  It doesn't have any leap seconds, it just keeps the offsets up to date.
      And so, we'll get into some of the problems.  I mean, if you think about what's actually happening here, UTC being a global time scale is all the computers in the world are updating at the same time.  And that's got to be a headache.  It's definitely  that's going to cause some problems.  Also, future leap seconds are unpredictable.  You don't know what the Earth is going to be doing.  The Earth is going to do what the Earth does.  You're going to get a leap second when you get a leap second.  There's no way to programmatically to work that out in advance.  That's another problem that comes with them.  We have inherent problems that computers do not like.  But you cannot  the Earth does what the Earth does.  The same with daylight saving time, that's much more of a tire fire.  We'll get into that in another day.  Leap seconds can be positive or negative.  We have never had a negative one.  If we have a negative one, go somewhere within technology.  Just go hide because it's going to be bad.  And the other one is the problem.  I'll get into this.  When we talk about UTC, we really should define it a little bit tighter.  It's  in terms of the specification, what UTC is, it has leap seconds, but the two standards for the  the standard for UNIX, the POSIK standard, was being developed around the same kind of time as the leap second  as the UTC standard.
      And it's different approach on how they would manage it.  The POSIKs and UNIX talk about UTC, but they don't implement heap seconds in terms of their time keeping.  The way UNIX works, it has a counter from seconds, but there's no  has no realization of what leap seconds are.  So, that causes some problems.  Just to give you an example how that looks.  The atomic time is on the left there.  You can see atomic time ticking away.  It doesn't have leap seconds.  It ticks 29, 30, 31.  UTC has leap seconds one, but it pops a 60 in there for the 60 second, 61st second.  But UNIX has that as a single number defining two seconds.  That's a problem.  Bugs can come out of that kind of thing.
      So, let's look at some of the common strategies we have for dealing with these things.  This is  if you're not  not all versions of UNIX and Linux are POSIKs compliant.  People have implementations of it.  But the ones that are, they step the clock back.  Essentially the clock goes forward and plays out the leap second, and at the back, it steps it back by one second.  NTP does it differently, it stops the clock for a second and the clock moves on again.  Doesn't go backwards.  This is popular, this is leap smearing.  Google tried this I believe originally.  There has been different experiments done by different cloud providers.  But more recently or in the last one, certainly, they were standardizing on this 24hour leap smear.  So, the idea of a leap smear is over the course of 24 hours, you put the second in, but change the clock.  You're no longer getting SI seconds.  You're getting something slightly off.  But it sneaks that second in over the course of a 24hour period.
      And then you have  your clocks never get the leap second.  Every time they catch up with NTP, then you're getting slightly skewed version of the time.  But then you'll never get that leap second because you never have the problems of dealing with leap seconds.  And it really only works on anything that's got a sort of  a bit of  like the Internet's a bit laggy sometimes and you can get away with this kind of thing.  It's a good approach for this, but I really am not happy if it's not giving me SI seconds.  I want SI second.  You can avoid leap seconds.  That's a really sensible approach sometimes.
      It depends on what you're trying to do and what you need time for.  If you wanted to use something like atomic time, I think atomic time's really sensible.  It's been ticking away since the 1950s, never deal with leap seconds, a lot of problems disappear.  But you need some way of getting UTC time back very often.  You could ignore it.  That's what Windows does.  Windows is, nah, whatever.  What happens with Windows, you get to midday, or midnight, whenever the leap second is coming in and it doesn't wait to do anything.  And waits for NTP to catch up.  The NTP is syncing to the server, and the time is off now.  But it will do it whenever it decides to do it.  You'll find it can be off by a couple of minutes or longer.
      It depends how often NTP decides to check up.  It works.  It's just annoying.  Everything's out of sync for a little while.  You can abolish it.  And that's been talked about since the 1999.  Some countries are for it, some countries are against it.  And it really depends on who is lobbying and what  for the most part, astronomers really  astronomers have other ways of doing this, but they want to keep it, really.  You'll find that the  some countries jump back and forth depending on what's going on.  But we still haven't got to a point where we can say this is definitely going away.  It's still around for now.  And it's about to be debated again in 2023.  But it keeps being put off.
      You can actually implement it, which this was very annoying.  Microsoft has actually gone and done it right.  We have a situation where I'm told that the latest version of the Windows Server will have full support for leap seconds.  It will have very precision time keeping.  So, yeah, this  if you have very, very tight time keeping needs, this is probably going to do it for you.
      So, in summary I would say pick the time scale that matches your use case.  Because if you're looking for accurate of what the Earth is doing, you should be looking at UT1.  And you can actually get UT1 over NTP.  This will give you that.  If you care about what the Earth is doing, go that route.  If you want precision time keeping like precision frequency, you should be looking at atomic time.  If you want something in the middle or talking to other people, UTC is the standard.  You need to look for something in the middle.
      So, that will be me.  Yep.
      [ Applause ]
      >> There we go.  Yes.  Questions?  That's exactly what we're on to.  Questions.  But please wait for the microphone so we can all hear you.
      AUDIENCE: You mentioned UT1.  What are the UT0 and UTC2?
      JOHN: Yes, UT0 is the raw data, if you like.  UT1 is they apply some  there's some polar motion that comes with it.  There's regular polar motion.  UT1 filters out the polar motion.  UT2 filters out a bunch of other stuff.  But UT1 is the one that's primarily used for your comparison.  You can get those things, but nobody tends to use them.  Yep.
      AUDIENCE: Hi.  If it's 2023 and leap seconds get abolished, with the actors  will the bulletins see?  Will it still be produced and there will be a time scale called U TC still with leap seconds in it?
      JOHN: I think what happens is UTC will sort of freeze.  It will still exist as a time scale and offset from atomic time by 37 seconds at that point, unless they put any more in.  But it will begin to drift from what the Earth is doing.  The UTC will just kind of get locked in time, actually.  Yeah.
      AUDIENCE: Sorry, the question was more, would somebody keep doing leap seconds like because they really love them?
      JOHN: Actually, if you look to the Paris wants rid of it and France, mainly because of the overhead producing it.  You can imagine the work  a huge amount in actually making this thing work.  So, yeah.  I think it would get frozen in time.  And in fact, you don't need to produce it at that point.  If you decide you don't need leap seconds, you can just block it from atomic time going here and offset it from 37 seconds.  You're still tracking atomic time, somebody somewhere is going to have to do that.  You still need atomic time and to synchronize the clocks to get a representation.  I think Paris is stuck with it.  Yeah.
      AUDIENCE: You mentioned that you get a little bit of advanced notice, about six months.  How well do we actually  are we able to predict these things if you wanted more than six months notice?  Would that be feasible?
      JOHN: No.  I mean, you will get  if you  there's a mailing list you can get it and you know it's coming.  And what generally happens is the first people who get it are the time body  the labs who are getting all of this information.  They then put UTC together.  And UTC is a monthly thing.  So, very often  you'll know six months beforehand, or about six months, just less than six months.  So, anybody who is caring about that can get that stuff into their systems early.  If it's just a lookup table, that's really easy.  I think that's very generous, actually.  If you can't, you know, put an update out with six months notice, you're not doing it right.
      AUDIENCE: It's a slightly frivolous question, but when we have leap years, when we have leap years, they introduce an extra day in February.  So, why are leap seconds not called leap hours?
      JOHN: I did think of the worst-case scenario as  you can't have them at the end of any month  you can.  And theoretically if you had it at end of the 29th of February in a leap year, that's going to be a car crash.  That's going to be really bad.  You can  there's not  I don't know why they're called  they're leap seconds.  I think that came from leap days, obviously.  These have been around since Gregorian times.  I think they were just bored.  In the spec they're actually called discontinuities, which is a polite way of saying we're going to pick up and put over here now.  Yeah, it's not pretty.  I think leap seconds comes from leap days, you're right.
      >> Any  any other questions?  Yep.
      AUDIENCE: What's your favorite solution for leap seconds?
      JOHN: My favorite?  I like atomic time.  It's really simple.  Atomic time just ticks away.  You just need an array of offsets and then  you've got six months to put that leap second in.  That's just really simple.  Why don't we just do that?  Makes sense to me.
      >> Anymore leap second questions?  Okay.  Oh, one more.
      AUDIENCE: What's your favorite bug that's been caused by leap second?
      [ Laughter ]
      
      JOHN: Oh.  Favorite particularly, I just  it's like Christmas every time it comes around.  Like, what's it gonna be this time?  I really love it.  And there's leap second parties.  I don't know if you have ever come across those, but people have them.  I jumped in the air last time, it was my second.  It was great.
      [ Laughter ]
      You get six months warning for your parties.
      AUDIENCE: Is there anything you don't like about leap seconds?
      JOHN: They're hideously complicated.  Yes.  They're  I really just scratched the surface here.  There's way more  especially when it comes to the technical sides of implementing some of this stuff.  There's a lot more to it.  Yeah.  It's a headache.  I might need a pint.  Yes.
      >> Excellent.  Well, I think we will stop there.  So, let's all thank John once again.
      [ Applause ]
      JOHN: Thank you.

