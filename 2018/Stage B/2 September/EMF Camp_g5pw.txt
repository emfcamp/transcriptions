      Bootstrapping a hackerspace
      
       g5pw
      
      >> Okay.  Next talk.  We are now going to learn to bootstrap a brand-new hackspace
      g5pw: Hi, everyone.  Hi.  Welcome to one of the last talks here.  Sad.  I work as a developer.  And I'm one of the founders of meetup, my hackerspace in Italy and I'm one of the guys, so, I do the network stuff.  Meetup is a mediumsized, I would say, hackerspace.  Founded in 2016.  We have 70 members of which 20 members show up regularly.
      What are we  what I'm going to  what I'm going to try to explain to you is I'm going to start with a very brief introduction to hackerspaces.  I'm guessing everyone here knows what a hackerspace is, right?  Yeah.  Mainly this talk is about not trying to reinvent the wield.  Reuse standard software that is already there with slight modifications in order to get everything to talk to everything.  Integrate stuff without much effort.  And I'm going to explain basically what we did at Mittelab.  Which software to choose and how to communicate effectively and collaborate.  I'm not going to talk about designer patterns.  If you want a talk about design patterns, I did another talk.  You should check out that.
      Or there is the talk introducing hackerspaces and patterns.  That's found on the website, hackerspaces.org.  This is not a guide how to start a hackerspace.  And not a free tutorial.  I will explain what it is.
      What's a hackerspace?  This is a highly discussed topic, and everyone is very sensitive of this.  A definition that I found out on IOC was if your kid is into sports, you bring them to a soccer club or baseball club or whatever.  If you like spec, then bring them to a hackerspace.  Another definition that I like very much is that a hackerspace is the sum of its members.  Why is that?  A hackerspace is usually a physical space where people meet.  And these people have interests, so they have stuff they like to do.  And those interests usually defines what kinds of projects are done in that space.
      So, people are gonna be interested in electronics.  You're going to do electronics stuff.  That finds what kind of equipment is available or is going to be bought by the community.  So, hackerspace is a group of people.  That is very important.  Another thing that is very important is how do people collaborate in a group?  So, in order to collaborate efficiently, inside a group of people, especially if they're not already present in the same space or some are remote, or some are just not present that day, you need communication.  People need to talk to each other as simply as possible.
      And right.  In this day and age of Slack and IM and stuff like that, it's  it seems obvious, but it's really to the that obvious how to communicate effectively.  There needs to be some coordination.  So, people need to know what needs to be done.  Who to take charge of doing it.  And usually when it needs to be done.  What's the deadline?  And afterwards  and this is also very important  and as, you know, programmers, we're usually bad at this, documentation.  What was done, how it was done and how can people recreate it?  So, what's  what we found out is in order to communicate there really needs to be three levels of communication.  There needs to be a daytoday communication where we can post the latest memes.  You can ask if the space is open.  If anyone is there.  What are they doing?
      And things that need  or usually warrant a quick response.  There needs to be a place where people can communicate important stuff like announcements, new projects, general discussion that, you know, has to have an attention span which is longer than the couple of pages that one usually reads in an IM program.
      Finally, there needs to be a reference.  So, things get discussed.  There is a decision.  And then this decision has to be recorded.  And this thing has to be really easily accessible.  Really a couple of links away.  You don't have to wade through screens and screens of foreign discussion in order to reach the final conclusion.  And this is the three levels, basically, that  this is the community pattern.  If you see the community pattern on hackerspaces.org, this is basically it.
      Right.  So, you decide on a couple of things.  Now the couple of things needs to get done, actually.  The first and simplest approximation of getting it done is using the to do list.  This is easy.  Just need to write down in the etherpad, Google Sheet, whatever.  You write down what needs to be done.  Who needs to do it.  And by when if that's applicable.  And this is it.  The problem is, a Google Sheet or an etherpad doesn't really scale that well.
      If you have 40 people collaborating on the same thing, you're going to have problems with that.  So, what you need is basically a project management software.  This is kind of heavy because usually these things are really difficult to use.  So, really has to have low friction.  Has to be, of course, multiuser because multiple people are gonna use it.  And it has to have multiproject capabilities because you don't really  there is some software like Redmine and stuff like that usually has only one project and you don't really want to deploy another instance for everything that you want to do.
      Right.  So, we have discussion forum.  And we have a Wiki or some way to store documentation and we have something to collaborate with.  And this is already three accounts.  So, this quickly devolves into a madness where the poor IT volunteers need to reset passwords daily and deal with  generally deal with users.  This is another thing that doesn't scale really well.  So, what you really are gonna need is some kind of central authentication system.  This has to be simple to use because really people in hackerspaces, not everyone is tech aware.  You're going to have artists, you're gonna have people that really don't know what a key is.
      So, this thing has to be easy to use.  And it has to be relatively simple to deploy.  Because, again, IT people are volunteers.  And are gonna do this in their free time.  If people have to, you know, work on it for months and months in order to get it done, it just won't get done.  Right.  So, how did we solve this?  We had a couple of  we choose a couple of constraints.  We set a couple of quick things that we pulled up when we started looking for software that could do all these things for us.  This was well, a year and a half ago now.  It has to be open source, of course.  It has to be selfhosted.  Because we wanted to, you know, not get attached to any kind of software as a service or external service.  We want to be in charge of our own down times.
      And, of course, it has to be easy to use.  And what we finally settled on choosing is this.  So, we have for the three layers of communication, we have telegram and IRC for daytoday communication.  We have this course for important stuff.  We had the Wiki for reference.  For accordance, we chose Kanboard which we're going to see in a couple of slides.  For documentation we chose both GitLab and doc Wiki.  For authentication, we started out with LDAP and then moved to Salmon which is way, way better.
      Right.  Instant messaging.  I think everyone knows telegram.  It's pretty popular.  The project is open source, the backend is not.  But, you know, got to deal with some  we could have deployed, for example  but you need to use something that people use.  What we needed, though, was bot support.  And we chose IRC mainly because there were some people who refused to come on Telegram.  But it's very direct.  You don't need an account or a phone number or set a password.  You can just use the free node web chat.  You basically having a link that auto joins you in the channel, more or less.  You have to choose a nickname if I recall correctly.
      But this is from our website, you click the link and you can chat with us.  It also has bots.  Why is this important?  Because we actually found a bot that can synchronize a conversation both via telegram and IRC.  So, basically this grabs a message from Telegram, puts it on IRC and vice versa.
      It's a bot based on  which is part of the bot, an IRC bot with a plugin, Supybot telegram bridge that can connect both services together.  We made pull requests.  Now it supports multiple channels, multiple groups.  And this is how we, yeah, gave back to the community.  What do we use it for?  Hackerspace status.  We have a command which is unfortunately right now manual.  People can interrogate if the space is open or not.  It has a command to set the keys, so people know how has the keys and who to pester if the space is not open yet at the set hour.  And we want to add MQ to this support in order to make the open/close status automatic and, you know, to interrogate some parameters like temperature in the server room or stuff like that.
      Communication.  It's Discourse instance.  It's pretty powerful.  Although it's Ruby on Rails which I don't personally like.  And the official installation is via Docker which I don't personally like.  But the nice thing, it has a mailing list mode.  The old school people prefer email and asynchronous communication in this way.  That finally doesn't give them the excuse of I won't use a forum, that's too new.  I prefer mailing lists.  If you do like mailing lists, click on the button and it will come to you.  This is a nice way to integrate both young people and the old school people.
      What do we put there?  We put new projects.  We put people who look for help.  That's because usually if you just write in the telegram group, you're not going to get that much responses.  And once, you know, you get past the first screen, nobody's going to read it anymore.
      We have events and workshop announcements.  That is also a separate category.  And we have general discussion between members, so anything goes.  And this is basically what we need our forum for.  Then we have Kanboard, which is mainly used by the board.  It is multiuser, has groups and permission.  It will handle multiple projects.  It is a little bit hard to get because that's project management software.
      But it is pretty simple.  So, if you see the  tease are the columns, ready, work in progress, done.  You just click on the plus and add a task.  Pretty low friction.  Moreover, it has GitHub integration, so you can link to an issue on GitLab and that is also convenient.  Speaking about GitLab, you probably already know what it is.  It uses Ruby on Rails, again.  We don't use it only for code or for our projects.  We only  we also use it for minutes for our meetings.  This is pretty convenient.  It is every new meeting has a pull request and then everyone  or merge request.  And then everyone can comment on that merge request and request changes and add stuff.  And then it gets merged.
      Of course, we use GPG signatures since that is actually important.  Since the meetings are official.  We use it for harder projects.  So, all our key card boards get uploaded there.  We have a special category for our library.  And our templates.  And we also use it for server configuration.  So, that is also something that is autodocumenting in a kind of sense.  So, the document  the configuration is there if you need to replicate it if the machine gets broken, just clone the repo and reinstall.  Last but not least, it's our Wiki.  It's based on DokuWiki, a normal run of the mill Wiki.  It has lots of options to customize however you want.  Here we put the events and projects.  Project recommendation goes here.  A detailed description of workshops here.  The infrastructure documentation.  How we did everything that is running on our servers.  Goes there.  And also, the roles.  Roles are kind of special for Mittelab.  We have a couple of roles with a backup.  So, for example, the internal authentication guy which is me has a backup.  The external authentication guy  sorry, the internal infrastructure guy, the infrastructure guy.  Then we have a role for media managing.  We have a role for event planning.  And every role is documented and usually has an email address associated to it.
      And this is our Wiki.  Now, for central authentication, the first version with that was used LDAP.  This is not ideal.  Required a couple of custom Python scripts to add members and to synchronize members with our CRM.  And basically, was not really that secure.  So, we were  we looked around.  And we finally found another software.  Which is way, way, way better.
      Which is called Free IPA and can do all of these things and much more.  So, FreeIPA is a software that can  will authenticate your users.  Will enable you to set policies for which users access which machine or service.  And it will have a log for security purposes.  So, this is the  the base.
      And it is really not a monolithic software.  It's composed much little small pieces which is an LDAP server.  For us, DNS, and it has a PKI.  So, all of our internal certificates are issued using this  this system.  It  finally, I think it's the only software  LDAPbased software  that is not Microsoft, I guess, because I didn't check that, that has a nice user interface.  And by "Nice" I mean, at least usable.  It has a pretty powerful command line interface.  Actually, this is one of the instances where the command line interface is actually more powerful than the web UI.
      It's written in Python so it's something that we already know.  And it's pretty extensible.  You can add your own LDAP classes if you want so you can manage them in the UI and so it's pretty customizable like this.
      What can actually be done with FreeIPA?  Well, it's an authentication system.  So, basically your imagination is the limit.  What do we use it for?  We use it for radius, WPA Enterprise.  So, the same set of user name and passwords that can authenticate you to our external services can authenticate you to our WiFi.  We use it for netbooks, another good piece of software for documenting for IP addresses and reqs and whatnot.  It's used to authenticate users to a set of computers we have that we use for everyone.
      It is used for our external authentication and by us to alter user's home directories, so they can move to a file and move to another common computer and the file is already going to be there.  And, of course, integrates with Epsilon that we will see in a couple of slides.  And that powers our SAML axe to all of our external services.  In the future, what we would like to add is an integration with our physical access system that we're currently building.  There's going to be that also.
      Right.  Give me a shout if anyone has heard about SAML.  All right.  A couple of hands.  Right.  It's a system, stands for security assertion market language.  It is used for single sign on and based around one centralized entity for authentication and multiple services authenticate to it, service providers.  Usually the sequences will  a user agent and the user in this case requests a resource from the service provider.  The service provider redirects him to the identity provider.  There the user can actually log in with his credentials.  And in the response, there's gonna be a SAML response packet.  And this is what gets forward  well, signed and forwarded to the service provider and the service provider then can use these to authenticate and extract of the user in order to authenticate hymn in the system.
      This is basically what Ipsilon does, it's written in Python and extracts information from FreeIPA.  It supports double authentication.  You can authenticate via password or  and it works pretty much like that.  So, the users authenticate to the IDM via a login plugin.  This is the password form or Kubros method.  This is extensible, so you can add your own if you want.  Then you have the information plugin which decides which information is gonna pass through to the service provider.  And finally, you have the authorization plugin that checks if the user is authorized to access that resource or not.
      Right.  How does this integrate inside our external services?  For Discourse, there's an official plugin which is called Discourse SAML.  This works.  The login works, and groups also work.  So, we use  have a couple of groups, for example, there's the members group which all members are part of.  And that gives access, for example, on Discourse to the membersonly discussion area.  So, that works automatically.  You can find it on GitHub, of course.
      For Kanboards, it doesn't work like I want it to.  So, login works, groups don't really.  They do some assumption.  Well, the plugin was made from the one that does LDAP authentication and that relies on some mechanisms that are not available with SAML.  So, that's not ideal.  But we're working on it.  We already submitted some pull requests for that.  And that's gonna be fixed soon.  Hopefully.  For GitLab, the support is integrated inside, baked right in the omnibus package.  Login works.  Group sync is currently a work in progress on the GitLab side.
      So, that is not working yet.  That requires manual intervention.  And lastly for DokuWiki, there's a plugin.  That was the first that actually worked out of the box.
      Right, so this is how everything goes together.  The last thing is, of course, the users.  For a while, we searched the whole Internet for selfservice user panel.  And finally, we found mokey which is done by a university.  It supports user first account activation.  With a simple command I can automatically generate an email to a user.  Welcome to Mittelab, here is the link to set your password and log into the services to activate your account.  And users have one-time login tokens.  They can upload SSH keys.  Of course, the server itself has customizable templates so you can start it however you want.  It also has signed emails if you want.
      And if actually writes  it actually was installed and tested and actually works.  Well, we sent some pull requests, and this is written in Go which is  which was a new language to learn and submit a pull request to.  But we managed to do that.  And this is basically everything that we need.  So, we were pretty happy with all that.  How did this actually run on?  We have a dedicated server for GitLab and Discourse, which is the biggest server that we have since Ruby on Rails eats up a lot of RAM.  And two VPNs.  One is for sole service and one is for the outside replica.  For the stuff we have collateral machines with FreeIPA and the mass storage for the home directories.
      Since we have a little time, I wanted to talk about SpaceNet.  Has anyone here heard about SpaceNet?  Arms up?  Yay.  Hooray.  SpaceNet is also active here at the EMF.  It's a federated network.  Something like Edron, if you heard about it.  Multiple hackerspaces can participate, and it give use login with your credentials on every hackerspace that actually participates or not.  And also, events like this one or CCC or CCC Camp.  That was also covered by SpaceNet.  And, of course, it's reasonably secure because it uses TLS.  And it is privacyconscious because you use an anonymous identity to do the first login to your server.  Your user name is not used outside of the secure tunnel with your server.
      moreover, there's Space SAML.  This is a work in progress.  I have talked to Wilco about this.  It's deployed on a couple of hackerspaces.  But they need to set up an automated system to make joining other domains more easy.
      And another thing about membership management, what we use.  It's Triton, it's a Python based CRM.  It's complicated to get into because you have to know the basic accounting keywords to know how to use it.  But this is what we use to have a database of members which is required by law in Italy.
      We set up fees, reoccurring fees.  And manage all the finances in that space.  It's nice because it has an app, so you can actually embed it in another website.  And this is what we wanted to do.  So, what we  what we are planning to do is some kind of selfservice management for the members.  So, each aspiring member can actually  and can actually request a membership or terminate it if it doesn't want any more to be a part of Mittelab anymore.  And another thing you want to do is integrate NFC.  And that is it.  Thank you.
      [ Applause ]
      So, since  do we have some time for questions?
      >> Yep, we do.
      g5pw: Awesome.  Great.  If there are any.
      AUDIENCE: How long have you been running the hackerspace?
      g5pw: How long I have been running the hackerspace?  Since its inception, I think.  So, three years.  Another question in the back.
      AUDIENCE: Hi.  Do you have any solution for inventory and asset management?  Physical assets.
      g5pw: Actually, I do.  Like servers and stuff or like boxes and tools and stuff like that?  Oh, right.  We are currently working on it.  Yeah.  This is another thing.  I've actually  I didn't find  I haven't found anything about  that is, you know, reasonably standard and not really integrating in other stuff that other hackerspaces have.  I haven't found anything yet.  So, what we wanted to do is start building something that is abstract enough in order to get it integrated easily in other people's stuff.  So, sorry.  If  let me think about it.  It actually is, I think.  It's on our Git which is Git.Mittelab.org. 
      AUDIENCE: Question for the recording, the last question was, is it public yet?  Cool.  Thank you.  Thank you very much.
      >> Thank you very much.
      [ Applause ]
      If you want to discuss more about this, you can find me in the west village or meet up at this exit and probably go to the youth workshop which is I think it's unoccupied.  If you want to discuss a little bit about this.  Thank you.
      [ Applause ]

