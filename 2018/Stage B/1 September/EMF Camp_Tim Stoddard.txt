      Developing Games for the Casino/Gaming Industry
      
      Tim Stoddard 
      
      >> Hello, everybody.  Welcome.  You are in stage B, B for bar because it's right next to the bar.  Very convenient.  If you're in the right stage, you're in the right place if you're looking for stage B.  Just a couple announcements before we get started.  We do really need volunteers for all teams.  There are all kinds of jobs that are actually quite fun to do, including standing up on stage and introducing talks.  We need people at the bar.  AV, video recording, heralding and other onsite things.  Please, please, if you have some time, volunteer.  All the organizers would be very grateful.  Hebocon is coming up tonight, it's a crappy robots contest.  It says that right here.  It's by the bar, not far away.  We want your feedback. you can give it anonymously at EMFcamp.org/feedback.  And there's a swap shop at the Cy bar tonight.  By your unwanted tech stuff.  I don't have any unwanted tech stuff, no such thing, and leave with somebody else's stuff.
      Next talk we have Tim Stoddard from Litchfield on developing games for the casino and gaming industry.  Please all give him a very warm midafternoon welcome.  Please.  Go ahead, Tim.
      [ Applause ]
      TIM: Yeah, thank you very much.  A nice sizable crowd.  So, a little bit more info about who I am.  There we go.  So, to be more specific about myself.  So, I'm  I guess my job title is as a C++ games programmer.  I have been enjoying  I've been loving to make computer games and other games and writing code for games since I was around 16 or so.  I even went to university to study it and ended up getting like a first-class degree in it.  And then I  then I joined the company which I currently work for, Cyclone Games back in 2013.  And started off as a junior.  And as of late 2016 I'm  I moved up to a general C++ games programmer.
      So, the kind of games that I work on.  Well, the games on the left and right, specifically I worked on.  In the middle is a game that I not worked on specifically.  It was one of my colleagues.  But it's kind of  it's the kind of game that a Cyclone Game works on.  So, five real video games on massive machines at betting shops or casinos.  So, apology for the video recording.  This wasn't mine.  I happened to find this on YouTube.  Some recording from within.  As you can see, this is an example of what's called a B2 category game.  I'll do like a basically  the legal regulatory side.  But essentially B2 games are the bigpaying games which are like 22, 50 pounds per game.  You get a longer game with more chance for rewards.  And you can find these in the UK.  Although if you follow the recent news, they'll probably going to be moving out soon.  But that's politics for you.
      So, I'm going to have to say that a lot of you do work in like the software industries.  But I just  but even if you're not interested, it's an interesting rundown.  Basically, a rundown of how these games work.  So, an individual game is like  kind of like for four different people.  So, you have people like me, programmer who writes all the codes for the games and such.  You have the artist who would provide you all the graphics and the animations.  You have the mathematician which that's the person who provides all the logics, the chances.  You just get it.  And they work on that.  Then finally you get the tester who is the one who, like, looks through the code of the game and finds bugs and distributes them out to the correct people to fix.
      Usually it is programmer who gets most of the bugs.  Which is not surprising.  But then once all the bugs get sorted out, that game gets sent over to the distributer who then finds more bugs.  Bugs, bugs to fix.  And once we fix that, we get a finished game.
      So, the kind of unique thing about the gambling games they work on is that you get different  you get different areas of the industry.  You get different subareas of the gambling industry.  So, say you get  but the three main ones that the parent company Playtag work on, well, that I get involved in is like online, mobile and retail.  Retail being the primary one that Cyclone Games does.
      So, retail specifically means working on big machines like these.  So, these are a bit specifically about ones which you'll find in like betting shops and casinos either in the UK or around Europe.  Or around most markets we work on in Europe.  They have at least two screens, but they can go up to four.  You have two different kinds.  You have the standard definition, which is like 1024x768 and then you have the highdefinition which is 1920x1080.  And they're built basically like windowslike machines with their own GBKs inside.  And we've generally built games to be like this where you have  where you had to account for multiple different screen sizes.  So, for example, on the very left you'll see what a standard definition game would look like.  And then on the right you could have a  and on the right, it's a highdefinition game, but it's because they have different kinds of machines, it means that the very bottom and the very top screens are vastly different resolutions and we have to account for that.
      And the UK specifically, the very bottom screens are for the code.  But for the screen, that goes to the main screen where you see the reels are.  The other system that we work on is called Trueserv.  So, it's almost entirely exclusive towards Italy and Norway.  Italy and Norway.  And main difference between Videobet and Trueserv, Videobet is handling multiple games at once.  But with the other, every game has an underlying server program that communicates with the client.
      And they're almost primarily dual screen.  And with the same different kind of resolutions.  But Norway has it's kind of interesting where it has a resolution of like 1680x1080, which isn't standard.  But it's a fairly easy one to handle with.  So, what's the difference between working on a video there and a Trueserv system.  One is with the packaging.  With a Trueserv game, you have to provide a separate program from the client and a separate program for the server.  Which can get pretty awkward when you're trying to build like new builds.  It's also particularly awkward if you want to  also with it  also with the Trueserv games, they have to be uploaded to a server which is often in a completely different country which means that you tend to have the fun experience of building a game, then having it uploaded, waiting an hour for it to go live, and then realize you have a require and an additional fix.  Yeah.  I know.  Fun.
      Compare that to say Videobet which because you only need to build specifically for the client, you only have to really build one package.  And that package is also simple enough that you can just  that the QA team can just upload directly without having to deal with servers.
      However, is a server client does have its advantages.  One specifically is that because the server and client are separate, that also means that your game logic, which would be on the server, has to be separate from what you're having on the client, which is your visual presentation.  Because of that you can also just  on the client side, this can be mixed unless you build your architecture correctly.  But if you don't, that could lead to risks such as if you're  if some part of your logic has to be delayed because your presentation takes a while to complete.  That could lead to some potential risks that having a server can avoid because the logic could happen instantly, and the presentation could happen as long as it wants.
      Another one is that in the event that you have a player who is playing a game.  They're doing a really good run.  They're going to get high pay and then suddenly there's a card failure or a network failure and the game shuts off.  Understandably, that player would be very, very angry if he goes to the staff who tell them, sorry, there's nothing we can do.  We can't replay the game.  Both systems have a way of handling this, fortunately.
      The Videobet there's a flag that gets raised if their system goes down unexpectedly.  And when the system restarts, it also  that flag will basically say, hey, this game failed unexpectedly.  Restart exactly on this game.  However, the developer is responsible for replaying basically the game up to that point.  There's also the disadvantage in which for the client it's only specific to one machine.  Alternatively, when it goes to Trueserv, the replay system is handled through the server.  Basically, all the developer needs to do is just to tell the server, hey, I'm pressing this button.  I'm sending this message at this point.  So, which the server will collect those and in the event of a failure it will  instead of replaying, the server will basically send those messages back to the client and then the client will handle it accordingly.  Also, because it's being handled on essentially a server, if the machine fails, you can just basically go take your card and replay the game on a separate machine and it will work just as you expect.
      So, what do developers need to know?  And I tend to find this out whenever I talk to people who aren't part of the industry.  They always ask us, and how do you make the game fair?  How do you make the game fairer?  Are they completely random and do you  how you make sure that people aren't just going to be losing all their money.  Simple answer is, we have to.  We have to because there's  because a lot of the country  because all the countries we work on have quite strict regulations.  And thanks to our QA team and also the testing processes throughout the distributers, we have to abide by those rules.
      This can be for like how long a game has to play a minimum time.  Which for the UK I think it's 3 seconds for a single spin game and then for the high stakes games, it's like 20 seconds.  But the most important one is called the RTP or returntoplayer.  The most basic we to put this is that it's the ratio between how many gets paid in and how much gets paid out.  Now, if you pay in  if someone pays in over the lifetime of the game like a hundred pounds, it's expected on average, and the RTP is set to 90% and then is expected to return, you're expected to pay back at least 90 pounds.
      Although with the regulations, this is expected over many, many longer periods of time.  It's usually up to a million or a billion games.  And it's pretty important that we actually meet  that we try to meet exactly as close to the RTP as possible.  To like a hundredth of a percentage.  Because if you go too high, the betting shops and the casinos are not going to be happy with you overpaying games.  But if you go too low, it's potentially breaking the line and you'll get the gambling commission coming after you.
      We also as a developer, when you're dealing with multiple regions, you have to deal with multiple different regions.  Because unlike the online and web gaming market, the retail market has pretty strict rules when it comes between country to country.  It's not as simple as just changing the text to a different language.  Some games will have a completely different user interface.  So, as you can see in this example, the top one is the  is for the UK game market.  But below it is the same game what it would look like for Denmark.
      And as you can also notice with Denmark, there's also additional features which aren't specifically required for regulation, but it's preferred for the market.  You also have a regulation specifically like I said before like minimum game time and how much gets paid out, how much you get to paid out over a span of time, what the RTPs are.  And sometimes you can have a completely didn't betting amounts which will also acquire didn't maths as well.
      So, this is what it's like now for the retail market.  But there's also kind of a question of what's happening for the future.  And a lot of this  and for player tech, this is specifically the boss code Gpass, or game play as a service.  So, essentially the idea of Gpass is to basically take a game from one system and have it be played almost entirely the same on another system.  So, you can play your game on a retail machine and then you can play the exact  continue playing on your exact same account on a website or on a mobile device.
      This is usually done through HTML5.  Which being a C++ developer is kind of  kinds of gets fun sometimes.  Just trying to deal with a completely different compiler and different errors and how things work.  Although it does have an interesting benefit in which you do get on  excuse me, on like developers who work mostly on online and mobile games had to understand how the retail market works and how completely different it is and vice versa.
      because it's specifically fun to see an online developer working on a retail game for a market that's nonUK.  And I'm getting a whole load of bugs back saying, wait, you need to do all that?  What do you need to do when you have to  what do you do as a retail developer when you have to deal with this many regulations?  And the answer is, most of the time is we usually have to build a completely separate build because there's too many changes to handle in just one specific build.
      So, that's kind of mostly what I've had to speak about.  So, thank you for listening.
      [ Applause ]
      Unfortunately, I wouldn't be  I don't think I would be allowed to say that on camera.  I think  I mean, although I kind of will say is that a lot of the random inputs is kind of out of my control.  Particularly for both Videobet and Trueserv, it's mostly handled by the machine's API in which we just get given the numbers.  We don't actually  all we have to focus on is how we actually process those random numbers. 
      >> I think it comes primarily from audience questions.  That's where it comes from.  Random numbers.  That's all the time we have.  If you have questions for Tim, please, he would be happy to answer them outside.  So, we have a pretty tight time frame for our next talk.  We'll get started on that one.  Please give him another round of applause.
      [ Applause ]

