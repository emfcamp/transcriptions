JO: Thanks so much for the introduction. My name is Jo and I'm a developer advocate for Samsung, which means I get to do a lot of things like talk at EMF Camp and make silly things like hedgehog curling and biscuit tinder, which is a very important app for rating your favorite biscuits. But I'm here to talk about an app I made a couple of years ago. I attended EMF Camp like I'm sure many of you did two years ago and I saw the giant inflatable bunny rabbit. The rabbit had some LEDs in it and also had a Twitter account you could tweet to and it would change its color. I loved this idea. Changing the way we interact with tweets really resonated with me. And the inflatable bunny kind of took this idea from the virtual world to the physical world, and it changes the way we interact with the things that people are sending. And I wondered what it would be like to have a thing in our physical environment that our friends and our loved ones could change to let us know that they're thinking about us. No message. Just a nice change of colors. You could delight or surprise someone from half the world away. A scenario kind of like that iconic scene from Sleeping Beauty kind of played in my head. Two people could change the color of the rabbit. And I thought... What if those LEDs were wearable? What if they were in a dress? What if they were in my wedding dress and my friends from all around the world would be able to tweet and change the color of my wedding dress, and I would know they were thinking about me. So this plan started in my head to make a tweetable light up wedding dress. But my quest almost instantly hit a brick wall. I was really excited about the idea, but I had genuinely no idea where to start.

Now, I studied electronic engineering at Uni, so that means I should know all about this stuff, right? And I'm a web developer, so making my own API should be a walk in the park. And yet I wasn't sure what tech to use. I spent a lot of time battling imposter syndrome, which is the idea that everyone around you knows more than you. That everyone knows everything. And that one day you're gonna slip up and everyone's gonna realize that you don't really belong. Anyone else feel like that? It happens a lot in techie environments. We're spending a lot of time with some really incredible people, and we have a tendency to compare ourselves to them unfavorably. So I was afraid of asking for help. Not only that, but I also suffer from anxiety related to perfectionism, which I'm sure some of you have also felt as well. Have you ever been afraid of starting a project because you can't decide what is the best tech to use, or you're scared of moving in the wrong direction? Or have you started a project but never finished it, because you couldn't get it exactly right and you were worried what people would think about it?

So getting started was tough, and I wasn't even sure where to start. I was afraid to ask people for help directly. I knew I needed some lights. I needed a board that I could program. I needed to be able to interact with the Twitter API in some way. But just where to start? So I did what I always do when I'm procrastinating on starting a project. I went on Twitter. And you may have noticed that I'm a little bit addicted to Twitter. And I needed a starting point. Or I would just procrastinate forever. So I asked Twitter for advice on what tech they would use when building such a project, and honestly, their advice was actually a little bit overwhelming. And, I mean, overwhelming, but also amazing. Thank you so much to everybody -- I know there are actually some people in the audience here who helped me out, and that's super awesome of you all. So what did I learn? Firstly, there's a board called an AdaFruit Feather Huzzah, and it's weighs 6 grams. It's teeny-tiny, it has Wi-Fi connectivity and it's got a USB connector, so I could connect it to the internet with the Wi-Fi and to power with the USB. It also takes a battery if you want to go that way, and it cost about 15 pounds, which was well within budget. I also learned that AdaFruit make things called Flora NeoPixels, which are tiny and lightweight and have great interfaces for sewing, so you can use conductive thread with them. They also have great documentation to get you started with learning how to use them. They're also about a pound each -- a pound in money -- and I needed 100 of them in the dress, and that was massively outside of my budget. So what did I end up buying? I bought the Huzzah, and then I went on Ali Express and Amazon and eBay and found the Chinese knockoffs of the NeoPixels, which don't have the sewing points, but they are white. Which was good, because it was going on a white dress. The downsides are the solder points are teeny-tiny. There's no sewing points, but I can't sew for toffee anyway. So I was gonna be gluing these things in. Let's not beat about the bush there. I also bought the things I would need to connect them. A soldering iron and solder. And my initial plan had included conductive thread, but I had learned from the Twitter thread that conductive thread doesn't work very well when you're dancing with any movement. And if any of you were at my dance class on Friday, you know that I dance a lot. That wasn't gonna work. So I decided to solder them together using single core wire, because it's nice and easy to solder.

And then my plan was to make a circle skirt out of this white netting and glue the LEDs directly into the skirt with hot glue. So now I had all the gear, but still not really any idea of where to actually start on the software. So I had to lean on the community again to get some help. I went to a hackathon. Not just any old hackathon, but one called sex tech hack. Which is a really awesome, friendly, inclusive, nonjudgmental, beginner welcoming hackathon. There were some really lovely people who helped me sort of get started in the right direction with the board. Now, this isn't always the way with hackathons, and if you want to check about friendly and unfriendly hackathons, come and chat to me afterwards or tweet me, because it's something I'm really interested in. But that's an aside. So what did I learn?

First of all, you have to install the Arduino IDE, which you can get on that link. I will share these slides out later, so if you're building your own similar project, all these links are available for you. It's also got some really awesome example code, so you can start running things on your board instantly. Next I installed the packages that I would need to make my board work with the IDE. So that's the library for the Feather itself, and the library for the NeoPixels. And the links there again. Then I soldered together some LEDs, because I wanted to test it with more than one LED. The LEDs have little diagrams on the back to show you what direction they have to go in and what needs to connect to what. So you make sure that your power is connected to your power, your data to your data, and your ground is your ground. And then you need to connect the LEDs up to the board itself.

So my 5-volt went into my USB, because I'm powering my dress from my USB battery. The ground goes into the ground. And then I was using pin 4 as my data out. And then from the Arduino IDE, there's a whole load of different test code that you can run. One of the things is an RGB strand test that makes your LEDs cycle through all the colors in the rainbow, and it's a great way to know if you've connected it all up properly. And this is a video of that happening! So before we talk about what I did next, we need to understand how RGB LEDs work. So remember in school when you were told that there were three primary colors? There was red, yellow, and blue. And when you mix them together, you got these colors. So red and blue make purple, red and yellow make orange, and when you mix them all together, you get this kind of sludgy brown color. That's what happens with paints. When you're mixing colors with light, it's slightly different. Our primary colors are now red, green, and blue. And when we mix them together, we get this mixture here. So red and blue make purple. Great. We know that one. Green and red make yellow. Okay. And all the colors mixed together make white. Sure. So why does this matter? When we talk about using RGB LEDs in the dress, RGB stands for red, green, blue, and it's these three colors that the human eye sees, combined to make a single color.

So if we have a closer look at one of these LEDs, they look like this. And they each have their own little tiny LED inside them. And we can give each of these lights a value to tell it how much to be turned on. Those values are between naught and 255. Naught being completely turned off, and 255 being as bright as possible. And we can use any combination of numbers to make any color that we can think of. So let's look at an example. So if we had 255 in R, which is red, 0 in B, and 0 in G, the LED would show it was red. If we had 255, which is full on, in red, nothing in blue, and full on in green, red plus blue would make a purple light. So that's really lovely for us as developers. We can do maths. We can work this out. But I wanted people to be able to tweet my dress with a color in the English language. Because I don't expect everyone to be able to know that purple is 255,0,255. I wanted them just to say: Hey, Jo's dress! Turn purple! So I needed a way to convert between these colors that the board understands and colors that humans understand.

So let's take a look at some colors that are available to us on the web. I wanted people to be able to tweet any HTML color that they wanted, and some of the html colors are named fairly sensibly. So we have red and we have green and we have blue and purple and orange. And then they get a little bit stranger. A little bit more whimsical. So we've got chocolate and tomato and cornflower and peach puff. And medium spring green and all kinds of colors. I wanted people to be able to tweet any color they wanted to the dress and I would convert it into the relevant RGB value. So what did I need to do? Well, first of all, I needed a Twitter account that people would be able to tweet at. I needed to be able to get those tweets that they sent, and pick the color out of it. And convert it to an RGB value. I then needed to send that RGB value to my Arduino, and then get my Arduino to send that out to my LEDs. So if you go to developer.Twitter.com, once you have set up your Twitter account, you can set up an app, which is what you need to be able to use the Twitter API.

And it's just a form that you have to fill in. Twitter have changed their rules about who is allowed to use the Twitter API now. They don't want you to make another Twitter clone. You have to be doing something interesting with it. There's a long form where you have to describe what you're doing. And it takes a while, but eventually it will be accepted, and you'll have an app. Which means you'll be given some consumer and secret keys, which is what you'll need to be able to actually interact with the Twitter API. So there are a few different ways of interacting with the Twitter API. And I wanted just to be able to get this done sort of quick and dirty. So I started off using PHP and OAuth, because I found this amazing video, which I've linked to here, which literally just took me through step by step. And this was brilliant. It worked really well. I was instantly able to get access to my mentions. I could process the text that was coming through from the mentions. I hosted it on the hosting I already owned, and it was brilliant, and then suddenly it wasn't brilliant, and it stopped working, and my hosting company were like... Huh! Okay! And I was like... But what? So... I'm not a sysadmin. I'm certainly not a backend developer. And I had no idea what had gone wrong here. PHP is not my language. So I decided to quit while I was ahead and start all over again.

So I built a whole new way of interacting with the Twitter API using Node and the npm Twit package. Which I really recommend. It's a nicely documented little package, which will get you using the Twitter API. You give it your keys. And it spits back Twitter mentions at you. With both of these methods, I was able to get the text of any tweet that mentioned @josdress, which is the Twitter handle that is connected to here. Oh, nice. And my code is on that Glitch link, if you want to see it. Feel free to copy it, use it, change it, whatever you would like to do. If you want to use the Twitter API, that is an easy way to get started. And so now I needed to get those color names and convert them to RGB values, and the way I did that was by creating an array that just had a lookup for each of the values and their respective RGB. I got this from a website called HTML color names.com. So I literally just copied and pasted one to the other.

And so what happens was when I got content from a tweet that said something like: Show me chartreuse! I looked through that text and I checked through each element in the array. So the first thing I did was: Does it contain Alice Blue? No. Does it contain antique white? No. Does it contain aqua? And so on and so forth. 'til we get to chartreuse. And it says: Yes! It does contain chartreuse. And chartreuse is 127,255, 0. So that is what my code was doing. What my API was doing. If you want to see my API, you can visit this URL here, and you will see three numbers. Those three numbers are the RGB value of whoever last tweeted something exciting. So we've now got our RGB value, but it's still on the internet and the board doesn't know anything about it. We still have to get that value from the internet to the board.

And my experience with microcontrollers and coding was so close to zero that it may as well have been zero, but luckily, AdaFruit have some really awesome documentation and code examples. I knew I needed to connect the board to Wi-Fi. I knew I needed to do a get request on that URL that I posted earlier, and I knew I needed to then, once I got those three numbers, send them to the LEDs. And so there's code that comes with the Arduino IDE. If you go into file and examples, there's all kinds of examples in there. There's examples of how to connect to Wi-Fi, there's examples of how to send a get request, and there's examples of how, once you've got three values, you can send them to your LEDs. So all I did was copy and paste code that other people had written. If you want to see my code, it's there on that Glitch link that I posted earlier again. The code for the Arduino is all there.

So as with many projects, it wasn't as smooth sailing as all of that. Getting my API up and running and then breaking was just one of the problems that I had. There was a whole bunch of issues. So, for example, the first time I attached the LEDs to the Arduino, to get the data and then send it to the LEDs, every fourth LED was the wrong color! And I was like... What?! What is going on?! It turns out there's not only RGB LEDs. There's RGBW LEDs, that actually process the data in a different way. So you have to make sure that you tell your board which ones you've connected. Not only that, but remember those knockoff AdaFruit Pixels that I bought? I was sending red to them, and they were showing green, and I was sending blue to them, and they were showing red. It turned out they don't take RGB. They take BRG! That was a fun one to debug! Once I had, though, I had all my software written, I had my hardware connected up and tested.

Now I had to put it all together. And I don't know if you've ever heard of the phrase "measure twice, cut once". But I'm much more of a measure nunce, cut a thousand times kind of person. Which can be frustrating and a waste of materials, but that's just how I am. So... The first mistake I made was that I assumed that I knew how to make a circle skirt, which is one of those beautiful swing skirts where you fold your cloth into a quarter, cut a nice quarter of a circle out of it, and cut the middle out of it. When you unfold it, you have a circle skirt. I didn't measure my waist properly, I cut a giant hole out of the middle of it, and I had to sew darts out of it. I hate sewing. The second mistake was that I got super excited once I cut the circle skirt and glued all the LEDs in. It's gonna be amazing. 100 LEDs in a dress! Guess who forgot to check which direction the LEDs were facing. They were facing in all random directions. Not only that. Because I wanted them to look random and not too equal, it then meant I had to measure wire for each distance between each LED. Not only that. I had to do it three times, because there's three wires you have to connect each one. And then you have to solder them. When you're trying to solder on something that's already stuck on to net... Soldering irons go through net like a hot knife through butter. Or like a soldering iron through butter, you might say.

So all in all... Gluing, soldering, connecting it all up took about 12 hours of absolutely backbreaking work. Here's me halfway through. That's what the connections on the back of the LEDs look like. They are so small! But I connected it up. I ran my RGB string test on it, and it looked awesome and I was so happy and proud of myself. But guess what happened when I tested it out. It instantly broke. Like five of my solder points all snapped. The whole thing just stopped working. So then I had to resolder it all. And then after a brilliant suggestion from Matt, hot glued the back of all the solder points to give them a little bit of extra strength. And then the next challenge was the sewing. I had to get that thing inside this dress. This was my wedding dress. And it has a lot of layers of tulle on the top and then a layer of satin underneath. And I wanted it to fit between the satin and all the netting, which meant sewing. I'm terrible at sewing, so I did just this sort of tacking stitch and pray around the top.

And also I had to cut a small slit into it. So that my cable could fit through my dress, so there's an Arduino in here. The USB cable was going through. And then I was thinking... Well, where am I gonna put this USB battery? All the women in the room... So Spanx are these incredibly elastic, very solid pants. And I was thinking I would put the USB battery inside the waistband of the pants. Which meant I had to cut a tiny slit through the pants. If I was able to sew, I would have put a nice thing in there, but I wasn't. So I just put a lot of superglue. And this was the only picture I got of the dress working. I got in the taxi on the way to the wedding and one of the solder points broke, and that was it. Dead. Nobody ever saw it. But it didn't really matter. I learned a lot of stuff and I was actually super proud of what I made. I was able to take it home and iterate on it and I was able to take what I had learned and make it better. So when you embark on a new project, you're gonna make a load of mistakes, and you're gonna do things that occasionally make people raise an eyebrow, like gluing all the LEDs to your skirt before you even thought about how you're gonna connect them up, and you're gonna make mistakes. But it's fine. Because you're gonna learn how to do it better. And you're not gonna get it exactly right the first time.

I don't know if you've heard the phrase "perfect is the enemy of great". But perfection is impossible. And it's a goal that's gonna stop you from actually, you know, ever getting started, because you're never going to achieve perfection. Just get started. And you'll end up with something awesome. A thing that I've learned is to do things my own way. If you would like to just get started, do it. If you like to plan everything to the last detail before you start, do that. Find the way that works the best for you, and understand the way you like to work and allow yourself to work that way. If I forced myself to plan and measure everything to the last detail, I get bored. I stop. I procrastinate. Diving in head first lets me get started, even if I have to start five times.

The next thing I would like to say is: Don't be afraid to ask for help. It can feel very embarrassing sometimes reaching out or admitting that you don't know something, but our community is full of really lovely people who are really glad to help. And also really opinionated people who just like the sound of their own voice. But... Don't be afraid to reach out to people. The worst that they're gonna do is tell you that they don't have time, and the best thing that they'll do is get you started in the right direction, or point you to someone else who can help you. And the final thing is: Offer to help! If you're an expert, offer your help to others. Attend hackathons, work with beginners, attend coding clubs as a mentor. Answering questions on Twitter even can make such a giant difference to people's projects. And if you're not an expert, getting involved in other people's projects is a really great way to learn new stuff. Thank you for listening!

(applause)

>> So we have some time for maybe one or two questions. If anyone's got any. Stick your hand up if you do. One over here.

>> Are you wearing a second iteration?

JO: This is the third iteration.

>> Okay. I would like to know what changed between versions.

JO: So the second version I bought presoldered versions of those knockoff NeoPixels. So you can buy them, and the three wires are already connected together. That sort of worked better, but those connections still weren't very strong. The third ones that I bought are these... I don't know if you can see them from there. Much larger bulbs. And the connections on those are much stronger. Not only that -- the lights are a lot brighter. So under this fabric and in bright light, they show up a lot better. These are all cheap knockoffs from China.

>> Anyone else? Cool! Then another round of applause for Jo Franchetti!

(applause)


