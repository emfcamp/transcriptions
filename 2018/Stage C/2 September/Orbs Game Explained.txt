MICHAEL: Hello! So I'm sure you've all seen the orbs kicking around the site. I thought I would explain exactly what was going on for those interested. The idea started last EMF Camp. I pinched a bit of Ingress, really, for those that know it. I thought... What can we do that's EMF Camp? First I thought... How available is it? I've got to make a lot of these. They've got to be cheap. WiFi was cheap, RFID is cheap, I could get PCBs made cheap. I thought I could do this for under a tenner. I'm sure I can. I'm sure I can. That's what I thought I needed. That's what I actually needed to put in them. Things like power regulation didn't really cross my mind until I was actually trying to design it. So the final cost was actually 14.50 an orb, very roughly. That's excluding all the bits that went wrong that ended in the bin. So that's kind of the prototype that I was working with. And yes, it worked at home! It was viable. Would it work at EMF Camp? I had no way of knowing or testing! I thought... Yeah! Let's go for it. This is one of the boards that's in the orb. And at the top, you can see the ESP module. Now, I was warned by Giles from 2016 when he did stuff with ESP modules -- they don't work very well when they use integrated antennas at EMF Camp. He was getting a range of a few meters from each of the base stations, so I used proper antennas. That's why you see the aerials sticking out the top of them. It's to guarantee they can get decent connections. The PIC chip down below in black -- they're selected because the ESP modules are quite power hungry when running. I wanted something that could wake up, check the RFID card, and go back to sleep again. The one on there is the 16F15345. It runs at 32 megahertz, it can do all sorts of stuff. It was ideal for that. But it'll go to sleep and draw almost nothing. The boards when they're asleep draw about 2.5 milliamps in total. When they're awake, they draw about 5 milliamps, including the PIC. And the RFID reader draws just under 30 milliamps when it's active. The Wi-Fi module is about 70.

So you can see adding all together I couldn't afford to have the Wi-Fi module on very much. So these RFID card modules that you buy from China, they're cheap. They're like... 1.10 on eBay. The problem, I found, was they had a read distance of about 2 centimeters and could only read a MIFARE Classic. I was desperately trying to figure out why. Everything I read said it should be more. Initially I thought it was a fake chip. So I bought some genuine ones, switched them over, and had the same problem. But eventually I found an article on a forum, and he had actually looked at the specs they had used. If you look on the bottom left corner where the arrow is pointing, there's two inductors, and those inductors were underrated from all the boards coming from China. I swapped those for 155 milliamp parts and suddenly it could read my Barclay card, anything I threw at it, basically. So for those interested, if you're gonna do anything with these RFID boards, the number there, the 1826601, that is the RS components part number that I used to replace these, to make them work. So if anybody is having a play around with that, it's well worth a look. So the way this worked is the PIC chip would turn on the RFID card reader for as short a time as possible, enough that it could check for a card, turn that off, flash an LED to show the team that was owning it, and go back to sleep. The moment someone interacted with it, it would read the card ID, power up the ESP module, send the card details to that, and send the details off to the main server.

The PIC chip -- I wrote the software in a thing called Proton Basic, a compiler I've used for PICs for many years. It's pretty straightforward to use. That's why I use it. On the Wi-Fi module, I actually used MicroPython. So that's got a MicroPython script that listens on the serial port to commands coming on the PIC and sends responses back. Just because I know where I'm at, when I wrote the communications, all of the comms coming in and out of the orb are signed with a SHA-256 signature to make sure they're coming from the server and from the orb, so nobody could game it in that way. Hopefully. I forgot I zoomed in on this. Just a rough thing. The black components on the middle are MOSFETS to turn the LEDs on and off, and just below that is the power circuit to regulate it to 3.3 volts. Incidentally, if anybody is scared about doing surface mount, I thoroughly recommend just get a 30-pound air gun and spend 15 quid on some solder paste. It's actually really, really easy. I had somebody doing it who has never soldered before in their life. Within ten minutes, they were soldering boards. Really straightforward. So yeah. That was the zoom in on that one.

So the way it works: There's a Raspberry Pi, the one at the bottom. It's got a battery backup, just in case. Because I knew I was gonna unplug it at some point by accident. That's currently in my tent, and everybody has been avoiding kicking it and moving it around if possible. The orbs and the scoreboard all communicate back to that server via MQTT. And it's just -- if they subscribe to certain message chains and certain topics, sorry, and so when you capture an orb, it will go through, it will send a token, which is so: Orb from -- then the MAC address. That presents an interesting problem when two of my Wi-Fi modules had the same MAC address. And then the line below it is the message content. So you've got the token ID of the user. Then you've got a message ID number. So the message IDs increase every time. Again, stop reply attack, and you've got the SHA-256 hash of the message and the topic. And you've got a list of the different kinds of messages that would be sent and received between the orbs and the server. To allow people to register, to allow people to check who owns the orb. That sort of thing. The back end. So as I said, it's Raspberry Pi. It's running Python. A Python script. And all the data is stored in a TinyDB, which is basically just a JSON file. I did that because it's quick and easy and it worked. I wasn't sure how scalable it was, but this was a way of testing it. The scoreboard runs PyGame, which is pretty straightforward. If anyone wants to do some simple graphics, you can get some good refresh rates on it, providing you don't use high complexity JPGs and so on. So I used BMPs, and it worked really well. And that allowed it to draw that scoreboard screen. Hopefully you've all seen that one. So yeah, the build.

Building 40 of these things was interesting. So yeah, it was quite chaotic at times. Boards everywhere. People soldering. Lots and lots of stuff. There's a lot of experimentation as well, while I was building some of these things. You can see the remains of that kicking around in the top right corner. And when you say you're gonna build 40 and then you see 40, you realize what a mammoth task you actually have in your hands. The orbs themselves were just sort of hobby baubles that you can buy. I sprayed them with frosting. Just to give that frosted effect. I also discovered ways not to drill holes in them. I went through quite a few that way. You can also see there was a couple of mistakes I made when I was designing these, because I was in a rush. And they ended up getting sent to production a little bit early, and then realizing that all the LEDs that I'd bought were rated at 3.3 volts, which is ideal for my circuit, but I had put space for resistors to go in, on all of the LEDs, and so we had to wire link a load. A few people helped. Nick, Dan, Iestyn, and Patrick all helped getting it across the line. I really appreciate all the effort they put into that.

One of the things that did come up: I ordered things rather late. I'll say late. Sort of about six weeks out. One of the problems was that the batteries that I had decided to use suddenly went out of stock, as I went to order them. So I ended up having to buy them from elsewhere. I actually bought them from a company in the Netherlands. They've got 18650 shells, which are inside the orbs. I was originally gonna use this particular one. 2amp-hour batteries. I got this email a week before EMF Camp to say they were back in stock after I had bought a load somewhere else. It's always the way. Yeah. So things I would change. Read the LED ratings would probably be a good start before I design a board. Cheap connector. Some of the boards are struggling to read, and that's mostly because the headers on the board are just cheap ones. They're not making very good contact. There's not much I could do about it. At that stage. Yeah. So ordering the parts sooner is really the answer. Build it sooner. We all know we're gonna not do that next time. And yeah, maybe use something that stays together. Because they kept falling apart. I had to use stickers to actually hold them together, if anybody noticed. And there's one little thing that I did notice, when I was remoting onto the Raspberry Pis. And that was: For some reason, the last login was from Jonty's beard-nightstand.chq.org.uk. No idea what that was about. So yeah, that's it. Have we got time for Q and A?

>> Plenty of time, yeah.

MICHAEL: Cool. Anybody got any questions?

>> You said that the RFID chip could only read a certain kind of RFID, and then you upgraded...

(audio dropped)

>> It just wouldn't turn on at all. My old Oyster card would read, but none of my bank cards, my Tesco club card. I couldn't get anything else to read with it. I swapped all the inductors over, and the same piece of code read all of the cards. Including my bank and credit cards. People have been playing with their bank cards, by the way. I am honestly not taking those details. I read the UID and that's it.

>> Any more questions?

MICHAEL: There's a hand up at the back on the right.

>> I was wondering what interesting statistics or data you might have seen come in? Or anything you might have learned from people playing the game that was not expected to you?

MICHAEL: People did detect some of the stuff that I had left in the game. Like speeding captures up by leaving your card underneath. So there's a couple little quirks I deliberately left in the game. Defending the orb as well. I think I put some stuff about that, but people were actively defending their orbs and so on. I haven't looked at any stats yet. But the game does log an awful lot of information about what's going on. So if you look at the scoreboard, it's flicking through a bunch of different personal stats. There's actually more captured. There is a log file recording everybody's time of visit to every orb. So one of the things I wanted to do, but I ran out of time, was that I wanted to be able to draw a map of everyone's visit around the camp for the weekend. So the data is there. But there's no EMF Camp coming up for me to quickly write that bit of code. I don't know whether I'll get around to it. But I'll probably put the data out there if anybody wants to have a hack around with it. There's a text file and a JSON file, and they contain all the data from the game. Only UIDs, of course. Anyone else?

>> Any more questions? There is definitely one in the back this time.

>> Are you planning to do this again next year, and do you have any ideas how you might evolve game in that time? I say next year. Two years' time.

MICHAEL: Yeah, there's a bit of development time, isn't there? First of all, I want to make them more reliable and not fall apart. Those are two quite important things. Evolving the game? I would have to ask for ideas on that one. I do want to put some puzzles in the game. So I wanted to do some things where you have to visit certain sequences to unlock certain stuff. So you have to, for example, if I can plan it well enough in advance, you have to write out a certain symbol or letter, and then your team will get a bonus point, and it will come up that you've unlocked something on the scoreboard. I also wanted to -- and again, there's a few things. I wanted to add a badge app where you could register and say your name. A website. That didn't happen. There's a number of bits that haven't happened, that I need to make happen. So you can set your name and register. For anybody interested, you can read your RFID card on the mobile phone, look at the UID, and figure out which player is you on the screen. But those are things I'd like to do. And team names. Red, green, and blue is a bit boring. I'll put it out for people to vote for it. Boaty McBoatface, whatever. That people come up with. If you've got ideas, please let me know. Oh, and one thing, before I forget. I have set up a GitHub repository, which I will be uploading to. At the moment, it's empty. But it is -- if you just search for Orbs Game, then you will find it. On GitHub.

>> More questions? Nope? Okay. All right. Thank you, Mike! Next up on this stage is Chromatouch. Just to remind you that EMF is entirely run by volunteers. If you're having a nice time, please consider giving some of your time back to helping run the festival. Thank you so much!


