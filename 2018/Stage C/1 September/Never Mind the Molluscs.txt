
GILES: Worst song in the history of music? Hold my beer! We also have sound houses, where we practice and demonstrate all sounds and their generation. We have harmonies which you have not. Now, those words, published by Francis Bacon in 1627, either foresaw generative music, or perhaps even willed it into being. Because Daphne Oram pinned those up to her wall at the BBC Radiophonic Workshop, and when she left there, the studio she founded was indeed called The Sound House. And her dreams of graphic scores creating sounds were realized. But this is not the story of Daphne Oram's Oramics machine and the BBC Radiophonic Workshop. Though I do know it. Somebody might get the reference. But really it was a passage in Douglas Adams's first Dirk Gently book that maybe got me onto the idea that mathematics could generate images, and those images themselves could generate sounds. That's not the quote. I shan't spoiler it. But the protagonist finds himself in a room where every point in space there's a new music. And later still I found myself at Finsbury Park's The Malediction Club, where I learned that noise could indeed count as music, and that is documented very well by Jennifer Wallis in her tome Fight Your Own War. But for all this grand talk of Daphne Oram and influences, I must warn you that the sounds I heard on those fateful nights... They didn't really sound anything like these sounds! This is just a tribute. Sorry! In advance. Yeah. It's a swindle. I've got forms for this. Two years ago, I was here doing Oblique Strategies Against Humanity. Don't worry about the links. My slides are on every page and you can have these slides in almost but not entirely the wrong fonts. So Oblique Strategies Against Humanity were mostly Lorenz attractor sounds. There were some of those last year, but it was mostly cellular automata. People started saying they liked the Lorenz attractor sounds, so there won't be any Lorenz attractor sounds today. This is where the story really starts.

I bought a scarf. I bought a generative one dimensional Wolfram cellular automata scarf. I didn't buy it. I funded it. It has shipped. I will have it in time for the autumn. That was produced by one Fabienne Serriere, whose name I probably just mangled. So in order to check the progress of my scarf, I looked at a video of hers on Strangeloop, the Papers We Love section, and I was introduced to generative seashell patterns, and a book called The Algorithmic Beauty of Sea Shells. Go and watch the Strangeloop video. It's probably much more... Well, there's no noise at least. There's very good knitting machine noise. It's probably better than my noises. I tried to get my revenge on Fabienne. Although the generative mollusk patterns you're going to see work on diffusion of pigments and inhibitors and hormones and such like, there is in fact a certain lizard where the automata works on the basis of one cell, one pixel. So there's a paper in Nature, and a research group did tracking of these lizards as they walked around their tank. So they tracked the progress of each lizard and mapped its scale patterns and deduced from that the underlying automata. So it literally is one scale, one pixel. And I was mailing her last night, in fact. I said... Well, great. My scarf is coming. I'm doing a thing at EMF. Have you heard about these lizards? No. Could I have a knitted generative lizard? Well, if you send me the code. Did I just volunteer for the soft toy industry? I think I have.

If you want to go and find The Algorithmic Beauty of Sea Shells, I would recommend finding it second hand, because at least the vendor there will tell you if it comes with the CD, with the software on it. But... Thanks again, Springer. It does appear to be available new on the Springer website. Unfortunately, when you click through to the place where it says download the supplementary materials, there's no mention of any software! So I have no idea if those new additions come with the software. And this was in fact part of a series. There's The Algorithmic Beauty of Seaweed, Sponges, and Corals. These come in multiple ebook editions, one more expensive than the other. One a cheaper, grottier rendering of the PDF. But the Algorithmic Beauty of Plants, there's an ebook you can find of that, and they've got all the code. It's a reasonably complete piece of software that comes with the book. There are various options for... Visualization. The colors. The geometry of the display.

And there are reasonably complex options for setting up the initial conditions of the simulations, and even how they change over time. And it's quite a piece of work. But... BASIC! Fabienne took quite heroic efforts to avoid reimplementing or running the original code with virtualization. That in itself is quite a story to behold. But let's look at this. We're iterating over multiple substances. Ja to Js. Go to old decay and do something stateful and hateful. Very slowly this has been turning into something approaching a proper Python module, and you can just iterate over the mollusk pattern. Which is in fact sort of turning legacy code into more modern Python. It's my day job, so I ought to be capable. The call hormone function, or rather the line afterwards, is interesting. Where there's a mysterious C for hormone concentration that's only defined within an IF statement that may or may not fire. And you think... Oh, what's that going to be? But then you look to the top and you see that... Just like Fortran, the variable will be initialized as floating point on the basis of which letter of the alphabet it starts with. But hang on! We're dividing by it! There's a divide by zero by default. Lovely.

But these things do work! So there's my Python Oliva Porphyria mollusk, next to a photograph of the real thing. I don't know if you believe in synchronicities, but the Oliva Porphyria looks rather like the viciously venomous cone snail. One of the most venomous creatures in the world, apparently. And I know this, because I went to the Natural History Museum venom exhibition, and it turned out that two friends who I knew worked at the Natural History Museum in fact devote their time to snails. And then there was someone at the London PyData event talking about the generative geometry of the shells, the shapes of the cells themselves, and somebody got a tattoo of a snail on their neck. So it seems to be... I seem to be somehow destined to produce generative mollusk sounds. And the way these things work is you have a number of substances that diffuse. And that's the bit I managed to vectorize in NumPy, and they interact with each other, and Oliva Porphyria, you have what I believe is called an activator-inhibitor reaction, so there's various couplings between the substances as they diffuse, and one of them is the pigment.

But before we make mollusk sounds, a little diversion. Yeah. The thing on the left is a Gauss map. Can this microphone go higher so I can actually look at the audience? Oh, I've managed it. Thank you. That's better! I can see my slides and you at the same time! So we're going to have a recurrence relation. We're going to pick a fairly arbitrary initial value of X. Feed it into the simple expression on the right. Which has two parameters, alpha and beta. And the next X is going to be generated from the previous one. And we're going to generate a sequence of X values. Maybe chuck away the first few as transients. And we're going to slowly build up a histogram. So there are regions where the system visits quite frequently, and there are places where it doesn't go at all. And we're gonna take that histogram and treat it as a slice of an image, and the height of the histogram is going to be the intensity of the image, and we're going to vary the beta parameter and scan across a whole set of these slices and build up a single image. And then we're going to change the alpha parameter slightly, scan beta back down again, make a new image, and that's going to produce... Well, a video. An animation. So beta is varying on the horizontal axis. Scanning up and down. And alpha is varying through time.

And we're going to abuse Fourier transforms, and treat those histograms on the bifurcation diagram as spectra. So if you imagine the bar graph visualization you might have on your audio player or your spectrum analyzer, we're going to run that in reverse with NumPy's real FFT library. Now, the point of a Fourier transform is we're going to assume that a signal is periodic, and we're going to build a spectrum for it. Well, we've already established that we're having varying spectra, so for the short time inverse Fourier transform, we cheat a bit, and we're gonna take each histogram, inverse Fourier transform it, multiply it by a vaguely Gaussian bell-shaped-looking window function, though it's not Gaussian. I believe I used the Blackman-Harris. We're gonna create a series of those audio signals. Superimpose them. And... Play on!

So the right channel is gonna be the left channel, played backwards. And I'll see if I can get the video going. And assault you with it. See if this full-screens correctly. No, not yet.

(rising sine wave sounding pitch)

(falling pitch overlaid on rising pitch to give the effect of spooky sirens)

(rising pitch and falling pitch superimposed)

(more pitches join in)

(applause)

Oh, thank you! I wonder if I can get this to work... Can I get my mouse back? I can see. I just can't get it back to my laptop. Oh, nearly there. It was too quick. Oh, thank you. That's better! Right. I'm gonna unplug the laptop. And... Do audio from my music player from now on. So if there's a pop, that's not part of the show. Yeah. That was a little bit of a cheat, if you know anything about Fourier transforms. You undoubtedly know that you need complex spectra, and we -- all we had was a single array of real values. I'm not going to explain about DC and Nyquist and how you pack a complex frequency spectrum so that its inverse Fourier transform gives you a real signal. No. Not today. At this ungodly hour of the morning. Oh, come on! Yeah. Suffice it to say, as I mentioned, we have multiple substances in the Oliva Porphyria simulation. We can take the real amplitudes from the activator part, what generally gets plotted with a threshold to produce the image. The inhibitor concentration on the mollusk -- we'll use that to be the imaginary amplitude. And we're going to take... Do exactly the same thing. We're going to take these... Treat these things as histograms, and the center of the histogram, the point on the spectrum where there's as much amplitude to the left as to the right -- call it the sort of center of mass -- that's going to pan the signal from left to right. And when that crosses the X axis, when it's balanced, we'll trigger yet another mollusk, and that one has -- gasp! -- four active substances. So the left channel will be the activator and the inhibitor. And the right channel will be two other substances whose names or functions I can't quite remember. I think one of them is to do with... Called extinction. For some reason, I have decided to call this next one Wheelkeeper Whelk: Come in the Hillside.

(spooky electronic grinding and whooshing)

>> No, sorry. Damn thing.

(more spooky electronic grinding)

(grinding continues)

(whooshing noises)

>> A small surprise. Yes. That was originally three minutes. But... A friend of mine gave it the official Lovecraftian ethnomusicology seal of approval. So you have him to blame for it stretching out to four. No. No Lorenz attractor noises, but I can talk about them. The circuit on the right was done by Paul Horowitz of Horowitz and Hill Art of Electronics fame. And I did build one. It's the rat's nest to the right. And a very nice person at the London Art Space let me attach it to his laser, and it produced a nice laser Lorenz attractor at the top. Unfortunately the sort of speed that gives you nice persistence of vision doesn't necessarily give you particularly interesting sounds, even if you attach those signals as control voltages of analog synths. And there are other problems. There's a big nasty rotary switch for switching the capacitors to change the speed. And if you think... Well, what if I wanted two Lorenz attractors? One slightly shifted to pick up the sensitive dependence on initial conditions? And what if I wanted to vary the parameters? So that would be either digital pots or messing around with transconductance amplifiers to have control voltages changing the parameters of the attractor. I haven't abandoned it, but it all got a little bit gritty.

So here's a list of things I have tried. Or haven't yet tried. First thing I did, in fact, was SVG and WebAudio in the browser, which people quite liked, apparently. I've tried controlling SuperCollider via Overtone, which is written in Clojure. I might go back to that, in fact, and redo the SVG in-browser stuff in ClojureScript. That's my idea of fun, anyway. You can start implementing things in C++, as LV2 plugins, which probably no one has heard of, or the sort of methadone to modular synths is a thing called VCV Rack. I hardly recommend you go to the VCV Rack workshop, because I won't be there. Safe in the knowledge that I won't be there. Can we have Lorenz attractors? Well, I better run off and write one, then. Eventually I gave in and just resorted to taking the variables coming out of a Lorenz attractor, the signals, quantizing them to 128 MIDI notes and shoving them down into analog synths. I called them Merry Christmas, Mr. Lorenz, because it's the sort of thing I do, and annoyingly, people quite liked it, even though I thought it was a rather dodgy compromise. All that quantization. Or you can cheat. If you run your Lorenz attractor generator on a Raspberry Pi, you can take the signal out via the GPIO pins, and use it to run some cheap and fairly cheerful digital to analog converters. There are a couple of DACs available for the Pi, but they're audio DACs, and I want more varying signals, that would probably be high-pass filtered out. And we're gonna take the output of those and then use them to drive some proper analog synths.

So not a Lorenz attractor, as threatened or promised, but Duffing's oscillator instead. So that's a Duffing's oscillator. It represents a damped oscillator. Alpha is the springiness of the springy bit of metal. Beta represents the non-linearity of that springy bit of metal. And it's been shaken, and omega in that equation is the frequency with which... Well, the driving frequency with which the system is being shaken. So I tried it! I went out and acquired some DACs. I wanted nice temporal resolution, good dynamic range. So lots of bits. Preferably I2C instead of the Pi's SPI bus. Through-hole. Steady as a rock. But I soldered it with this hand. But I wanted it cheap. This is what you want. This is what you get. This is what you want. This is what you get. I ended up being cheap with a 10-bit 2-channel SPI DACs. Never mind. And it came out all quantized and spotty anyway. But having considered ripple currents and RC passive filters for literally seconds, I went to the first blog post on the subject I could find, and then ignored it and just grabbed the first complete set of resistors and capacitors I could find. Filtered the output of the DAC, and I got a nice fairly smooth-looking Duffing oscillator, which you see below. So that's now sufficiently analog, I think. Yeah. That's proper analog now!

So that did get shoved into analog synths. We've got two DACs, two channels. We can have two Duffing attractors, slightly shifted. Frequency and the modulation of that frequency will come from one attractor. And the other attractor will modulate amplitude and filter cutoff. And as is my obsession, when things cross axes, X or Y, it will trigger either the high or low Tom or open and closed hats on my cheap and cheerful Korg Volca Beats drum machine. So I'll play you out with... Duffing oscillator noises, instead of Lorenz ones. Eventually.

(swirly electronic swishing and erratic tom and cymbal noises growling around)

(swirling snarls and swooshes upwards in brisk patterns) 

(cymbals continue tinkling, snare continues buzzing, swooshes continue snarling and swirling)

(this sounds like Satan's washing machine, tbh)

(in this captioner's humble opinion)

(but, like, in a good way)

GILES: Well...

(applause)

GILES: If New Order can get away with pressing play and walking off, I can't see why I shouldn't either. But I was technically the last act on the largest stage, so I kind of sort of... Headlined a festival by mistake. So thank you for your attention! If there's time for questions, I'll take questions. Or I can generally be found in Milliways. It's smoked brisket tonight. Buy a challenge coin.

>> If we do have any questions, I can come round and bring a mic. There was one thing I would like to ask. In terms of what we've sort of... The samples that you've provided today... Are these quite heavily curated? Or do you just kind of allow the device to produce what it produces, and then sort of present that?

GILES: Plausible deniability. There was a quote... Something I said at SHA that some people picked up on. You've got to give the algorithm a fair chance at sounding terrible. It wasn't me. I'm not responsible. The only... In fact, those sounds were mostly pretty dry. The only thing I did with my cheap and cheerful Korg Chaos pedal was that given the Duffing oscillator is based on a spring, I think spring reverb is kind of fitting. Yeah. Everything sounds better if you slap tape echo or reverb all over it. But in fact, that was the only one that I cheated on. I normally slap some sort of reverb over the bifurcation diagram sounds. But this time, I couldn't be bothered. So that was dry as well. In fact, it was only the last sounds -- only the last sounds came out of any analog physical music-making device. Everything else was just hot out of the Python console.

>> Okay. Well... Thank you very much again to Giles Greenway for that talk on generative music and mollusks. The next talk in here will be on podcasting. I forget the exact title. I'll tell you in a second. But... Join me again in thanking Giles Greenway for the talk!

(applause)

I'd like you please to all sign up for volunteering shifts if you haven't already. There's lots of things for you to do, that aren't too much effort. Including what I'm doing right now! So please do consider any shifts that you can manage. Thank you very much!


