>> So I'm very happy to introduce at EMF camp the TIM project, making a relay computer out of scrap, and Rory Mangles. A big welcome!

RORY: Hello! So first things first. My camp site is right next to the bar, so unfortunately, I might be a little bit more rusty than I would usually be. But yeah. This is the TIM project. This is the story of how I learned about computing. So back in 2010, I was about to start my GCSEs. Just finishing my GCSEs, about to start my A levels. And I hadn't really decided what course I wanted to do, but electronics looked interesting. Had never done it at GCSE level before. So I had a look at that. First module was on logic gates and various things. I was like... Oh, that's interesting. Don't know how those work. Because I haven't done any electronics before, I'll do some research before I actually go on the course. So I started looking on YouTube for videos on how logic gates work. Just general information. There was a really good YouTube video on how to make a half adder out of transistors. I was like... Oh, what's a half adder? That sounds exciting. Or it did to me.

So I rummaged around in the shed. And wanted to see if I could make anything... Make a half adder out of anything. The only electronics -- or really electrics -- that I had done previously was I played around with a couple of relays a couple of years ago, previously, just to make some little circuit or something that probably didn't work anyway. But I had relays, and they're really difficult to blow up, so I was like... Okay. Play with some relays. Make a couple of circuits out of that. I set about making this circuit that's up on the screen. It's really not the simplest way of making a half adder, it turned out, but I didn't know that at the time. It was only this way of doing it, because it was all done with transistors. Relays are much easier to use, it turns out. So I soldered together some relays, and obviously I'm assuming everyone knows what relays are, but if you don't, they're electromagnetic switches, powered by a little coil in there. A little switch just at the bottom there, showing an and gate. So you turn the two A and B lines on, and it sends a signal to the output.

It's a fairly straightforward concept, which is why I was using them. Because they're really easy, as I say. So I got ahold of a couple of relays, soldered them together to make logic gates, and soldered those together to make what became TIM 1. So this is the very first bit of computer logic I ever made. Took me an afternoon. I was very pleased with myself. I added a one and a zero or a zero and a one or a one and a one, and it gave outputs on those old motorbike lights I had lying around. It was very poorly wired. Pretty basic. And much more complicated than it needed to be. But it was really exciting to me, because, you know, I didn't know how any of this worked before, and then I had thrown together some parts and I had something that was doing maths! Really basic maths, but it was really... You know, for 16-year-old me, it was very exciting!

And I added 1 bit of memory in there, that just held the light on when it was turned on. Very simple, but you know... I had a computer with memory! So that was... All good fun. I then made TIM 2, which was basically the same thing, but with another bit of memory. TIM 3 I took the whole thing apart. And rebuilt it. Found a proper power supply, found a little box. And made a little three-bit full adder. Really going up in the world. So at this point, I had realized that circuit design for an adder was a terrible, terrible idea. Redesigned it. And the whole of the previous circuit was condensed down to about four relays rather than the 10 or so that was there. And that allowed me to put together a whole load of extra bits, and make full adders instead.

Which meant I could now add up to 16! Almost use it in my exams! But not quite. This was the point where it started getting vaguely serious. I was like... Okay. This is cool, but what if I go bigger? So this was TIM 5. This was the monstrosity that was TIM 5. Basically I got... TIM 4 was just TIM 3 with a bit added on to make it do up to 4 bits rather than 3 bits. TIM 5 was TIM 4 plus a load more memory and calculation sequencing circuits and stuff. So in the middle there, we've got two 4-bit registers, which hold data. As it's going through the computer. Those are all made out of car relays. The reason why this project is titled "making a computer from scrap" is because I didn't buy any of this. This was all found crap around the farm, that was around the place. Stolen stuff. So a lot of these are car relays. A lot of these are out of old cash machines that were made at the farm. And a lot of them are like washing machine stuff. Out of a microwave or whatever I could find.

And this lovely item was wired up pretty much... I put down a relay and then soldered up where it was, and it meant you ended up with what you see there. Which is... Amazingly, it works. And there's a video online of it working. Basically it could count up and do multiplications. So you put in two numbers, and it would add the number... Another number to it, repetitively, to basically multiply it. And it was 4 bits, so it could do up to 32 in total, with the carry bit. And yeah. You know, it worked. But I was like... Right. Kind of need to rebuild this. Because I can't move it. Because it's a pile of relays on a desk, all loosely wired together. So I built TIM 6, which was basically the same idea, but everything had been rewired. And just to give you an idea of the problems I was starting to get of not designing any of this beforehand, putting relays down, soldering them up, on the right there you can see the wiring on the underside, which is not... You know, a wireman would scream in horror at that. It's all point to point rat nest wiring rather than any looming of data bus or anything. It's just what's the shortest bit of wire I can use to avoid spending money on it?

All, again, all found parts, which is why nothing quite matches. And you got different car relays on the left and right doing the memory, and then all sorts of mishmash of stuff in the middle. But yeah. So this thing kind of worked. But there was a fault in it. Turned out one of the... After many, many months of taking it apart again, turns out one of the capacitors on the top right had a dodgy cell joint. I don't know that at the time. The problem was I had no circuit diagram. If you've written a bit of code and you haven't put the comments in, and you come back and a couple of months later, you're like... I have no idea what this does. This was basically this whole project up to this point. I was like... Right. I want to redo this properly. At this point, I still had a calculator. It was just add numbers. There was no program. It kind of did exactly what it was wired to do. So I was like... Right. I'm pretty sure at this point I could make a full computer. This is about a year later at this point.

So I spent up to TIM 6... Was a couple of months of playing around with relays. I was like... Right. I want to do a proper computer. But I am going to do some proper circuit diagrams. So most people at this point would download some circuit diagram designing tool. I opened up Microsoft Paint. Don't do that for your circuit diagrams! But I didn't know any better at the time. As I say, this whole thing was a learning project in more ways than one. So I was kind of trying to learn computing, electronics, wiring, soldering, all at the same time. So a lot of it kind of shows badly with that. But things are working, up to this point. So, you know... The other problem I had with building a whole computer... I only had what I could find. I didn't want to buy any relays, because they cost money, and at that point, I was still a schoolkid. I wasn't earning much money. I'm not gonna waste any money on relays. I scrounged around as hard as I could. Managed to scrounge about 200 relays. What could I build out of that?

So I started designing things. And these are some of my beautiful Paint arts that I drew up. I still don't know why or how I managed to draw such nice diagrams in Paint, but as you can see there, the basic idea was: On the left was the first design, which is basically TIM 5, with the 4-bit registers. And a much bigger, more complicated alphabetic logic unit in the middle that could do different things. I had this huge multiplex at the bottom to get all those different 4-bit numbers down to one 4-bit number and put that in another register. And then I said... Oh, 4-bit. I've got some spare relays. I can probably squeeze out 5-bit, but that makes ALU a bit bigger, and just a 5-bit ALU is gonna cost 40 relays, and the other is gonna be another 40. I was using most of my relays. I don't really like this design. It's not a neat way of doing things.

So I came up with a 1-bit ALU, which... Actually only used 12 relays in the end. But I realized if I switched through every single digit in the register individually, and just have a little bit of memory that saves the ALU state as it's going through, I can actually just do a series ALU. One bit at a time. Which has the benefit of, A, less relays, but B, variable bit width. So I could then have it 4-bit, have it 8-bit, have it 32-bit if I wanted to, if I had that many relays. I thought... That just saved me a ton of relays. Let's go 8-bit. I designed this thing to be a full 8-bit Turing-complete computer, as you do, out of 200 relays. The whole thing runs on punched tape. The main problem with relays is trying to get memory. Memory is expensive, in terms of -- every bit is at least two relays. And you have to have multiple registers of 8-bit wide, and you don't really want to do that. So to store the program, I made this punch tape stuff. We had a lot of receipt printers around, and I hacked one up to be a tape reader and hacked another one to print punched tape. What it has is a load of LEDs and photodiodes that -- as this tape is going through, it reads the tape off it. Reads the program off it.

And instead of most computers, where you would run the paper tape into the memory and then run it from memory, this one runs directly off the paper tape. You can see down the side here there's a clock pulse that clocks the relays as it's going through. So this meant I could have infinitely long program in my Turing-complete computer. I could do whatever crazy thing I wanted to do with it. I designed this thing, and I thought... I'm never gonna get this built. But let's go. Let's try. So first I built the ALU, just to check obviously the 1-bit ALU idea worked. It was great. With a bit of tweaking, a bit of debugging, it worked exactly as I planned. That's cool. Add some registers to that. That made the ALU unit. Then I had to work out how to control this thing. So I had to basically hard code... I came up with an instruction set. Which is as simple as possible to implement.

8 bits on the punch tape. First 4 bits are the address for the instruction, and the second 4 bits are the instruction itself. And these were entirely designed to be as simple as possible to code... Code. Encode into a relay computer, just using the wiring. Is that right? I've designed this instruction set, so I have to hard wire the instruction set into the relays. I managed to get that bit working. And at this point, I had to get the tape reader working. And that took me... A very, very long time. Because it kept... For some reason, the phototransistors kept dying. Relays don't die for anything. Stupid modern technology, being really difficult to use. And it turns out the earth lead had fallen off my soldering iron. It was 200 volts every time I was putting it through. I was like: Right. Full antistatic, put the mats down, when I was soldering something up, touching the wires... Ow, ow, ow, ow. That's not ideal. Why is that getting what feels like mains voltage?

Oh. After fixing that, the tape reader worked. That was that problem fixed. After this it was just a pile of relays on the table. I had to come up with a way of moving it around. I want to be able to see it and have it all fold up. So if I put the... Get a nice big plastic thing, couple of hinges, I can put the logic unit at the bottom. That's the heaviest bit. That's nice ballast. Put the control on the side, register down the side, quite neat, and the tape reader goes in the back. Perfect. So that's kind of how this thing came about. The whole thing is... Oh, crap. That one... Not used to using this on Google Drive. Okay. So... Good. So essentially this computer runs on Harvard architecture, which is the idea of... It runs off the paper tape, rather than on the computer memory itself. So it has a separate store for the program and data. The computer has five registers. One working register and four down the side, as the general working -- general use storage registers. And then I came up with a way of doing a really basic memory type using capacitors and diodes. I've got 16-bit -- 12 bytes of capacitor diode RAM. The whole thing in the end used 160 relays. A full 8 hertz clock rate. And a full 16 bytes of memory, if you include the registers!

Blistering speeds! And not quite running Crisis yet. But amazingly, after I wired it all together and spent forever debugging it... And I mean forever... It's still... My beautiful rat nest of wiring -- I didn't learn anything on this front at this point. Still trying to use as little wiring as possible... There's probably several thousand solder joints in there. All badly done by 16-year-old me. And none of it is insulated. All of it runs on 12 volts, fortunately, for everyone's sake. Consumed about 5 amps of power when it's up to full chap, and can do basic addition! But the whole point of the project was... You know, I just found an idea of... You know, I realized I could build computers out of relays. Okay, what's the logical extreme of doing this with what I've got? Yeah. So what we end up with was TIM 8! By the way, the name TIM... I just had to pick a name. And TIM was a good name. So... I pretended it was an acronym for a while. No. I just picked a name at random, pretty much. So TIM 8 is the combination of the two years that that was that project. And I took it round various places, doing talks.

It turns out when you have a whole computer made out of relays in a really nice clear box that opens out on the table with lots of little chunks, it's a really good way of teaching computer hardware. One of the problems these days is that everyone learns software these days. Or at least everyone here probably learns software. How to write programs and how to do Python and all the rest of it. But how does the computer work? You can give kids Raspberry Pis and all the rest of it. Right, there's this magic black box. If you put code in, it does these magic things. How does it work? Dunno! It has millions of transistors that do crazy things! Okay. You have a picture of it? No, no picture of it. Whereas this thing... You know, you can open it up. There's the registers. They're about this big. You can see them. There's the ALU, logic unit. It does number things. There's the control sector. There's the program on the punched tape that's reading through it. Here are all these flashing LEDs. You can see the program stepping through at 8 hertz, rather than bang and it's done. Although this was a learning tool for myself, it's actually been quite a good educational tool, having taken it round a few schools, and just showing... This is how computers work. And yeah. It's been... Not the most reliable piece of kit, you can imagine. And in a minute, I'm hoping to demonstrate it. And see whether it survived the trip from the car to my tent and then the tent to here.

Yeah. I've already covered that. Just going back on the... Quick on the program... I made a program called the Basic Language of TIM, or BLT. Nice sandwich. Again, my naming schemes are entirely arbitrary. You can see here on the right the instruction set that I wrote for it. So... You've got basic... You've got 8 different logic processes. You've got addition, and then a load of simpler ones. You've got all the addresses at the bottom left for the different registers. Load to, load from. Looping on a punched tape is interesting. Instead of like a normal program, where you can just jump, this is the kind of more traditional Turing machine style, of when it sees a loop command, it has to rewind the tape until it sees a start loop command and then runs it forward again. IF statements are similar. If it sees an IF statement, it keeps running the tape, but stops executing commands until it gets to an ENDIF, and it will start executing commands again, unless that statement isn't true. So there's a lot of working around on the tape there. I think it's technically Turing-complete. Turing complete is quite a difficult definition of all the things a computer needs to be able to do. But I think with conditional branching, AKA the IF statements and looping, it can do it. It can kind of do nested loops. Obviously being able to loop within a loop is difficult. I did kind of implement that, but a lot of things in this computer kind of work.

But I did actually write a program in the end that could do full simultaneous equations, solve simultaneous equations using matrix algebra. Which was about 10 meters long. I never printed it. For the sake of myself writing programs, I wrote assembly language in a simulator, so I could run it in a computer first before printing it out, because debugging on paper tape is a nightmare. So I wrote some ridiculous programs for this thing. Probably the most complicated program that I've managed to actually run is a Fibonacci sequence, which is a lot simpler. Recently I added... Basically TIM had been sat under my bed for the last five years. Haven't really done anything with it. But recently I hauled it out, blew the dust off it, and basically there's this fairly terminal problem of... Somewhere buried deep, deep within the wiring, one of the relays had died, and it was one of the important logic unit relays. I found which one it was many years ago, but just never managed to work out how to get it out. So... After seven years, I was like... I'm gonna do this now. No, way too much effort. I'm gonna do it. Turn it on. It had started working again. All right. Run with it. It's fine. So I got it all working again, mostly.

It's to the point where it can run programs, at least. The one thing that annoyed me about this is you would run a program and have nothing to show for it, except for the lights at the end. So I tried designing a printer and all the rest of that, and it didn't really work, as you can imagine. So I was like... These days, it's like... Right. I know a bit more about electronics and stuff, having now done my degree in electronics. Going away and spending many more years doing electronics after this. So I kind of know my way around a printer. It turns out parallel ports are the simplest protocol you can use. So I put a parallel port on it and wired that in. And it can now print with the tape reader. I plugged it into the same tape reader it uses for this. The text is very small. Pretty tiny font. But technically I could plug in this into any printer and it can print out. You can use it like a teletype terminal, if you know your ASCII codes. Keyboard is next on the list. But basically this then allowed me to write the program that... Everyone always does when they first do it. Now can do Hello World on a relay computer, which was very satisfying! So yeah. We'll give it a try. I can't promise anything! But unfortunately the tape reader has got a little bit worn out, so it's a bit sluggish on actually reading the program. The clock speed is set by the motor and the grip on the roller in the tape reader. So it's not the most reliable setup. But we'll see if it works. Power on switch in the front. We've got the five registers at the front here, which... Working register at the bottom, and the four main registers. Nice big rotary switch on the side for selecting which you write to. Switch on the bottom, give you the option of manually writing data to the registers. Currently we've got the Hello World program ready to go. So I'll boot it up, and see if it will go! LEDs in the front just start lighting up if it works.

Manually feed it. It's fine.

(clicking and whirring)

So that hopefully printed out hello world! Well... It printed out hello world twice! But that's close enough.

(applause)

It kind of survived the night in the tent. I'll just open it up so you can have a better look inside. If anyone wants to ask any questions while I'm doing that, go ahead. I ran out of slides, so that's me done for the day.

>> So I've got a question. How many hours in all do you reckon you've put into this? If you had to guess?

RORY: I have no idea. Basically it was a two-year project, pretty non-stop. But the main bulk of that was designing or doing all the little circuit diagrams in Paint. I say little. They're several... Almost tens of thousands of pixels across. But the actual wiring for this particular model didn't take too long. I mean, each module took me... I mean, recently Facebook Memories sent me a link to one of the pictures of this, saying: Just spent three days doing the wiring of this. I estimate it took me three days to do the main logic unit. Can't imagine how long it took to debug it and get it working. It's very modular. So each unit was done separately. That's that gone. And each module I've made, each module was debugged and then they all had to be wired together. Yeah. So... I mean... I can't obviously hold this up. But if after the talk you guys want to come and have a look, I can power it up on the desk. And show it working and talk through some of the bits. The great thing about relays -- you can just plug LEDs on any of it, and it lights up and looks really pretty. Also helps for debugging, when you can remember what all the LEDs do, which 90% of the time I can't. Let's see if I can get it to run while open. Not really. I'll have a fiddle. See if I can get it to work. If anyone wants to come up and have a look... More than welcome to.

>> Anybody have any questions? Oh, got one over here.

RORY: There we go.

>> Bit of a random question. Have you ever set TIM up on a table on a train just to see what people's reactions would be?

(laughter)

RORY: I did consider taking it into my GCSE... Final GCSE exam when I had TIM 6. Unfortunately I think I was told I couldn't, because the noise would be distracting. The general idea was to... Get it to a point where I could run programs on it. It doesn't really transport very well. Although it is 12 volts, and I have considered making it battery powered. But it's not really a PC. I've always wanted to try and get it to... I've always joked about the fact that it could run Windows, if it had enough memory. But now I've got a terminal. You can almost write an operating system for it, but I'm not quite sure how much you can actually do with it and how awfully slow it would be.

>> If it did run Windows, how long would it take to boot?

RORY: Unfortunately there's not very much light in here. I'll try and get some... Data in the relays.

(applause)


