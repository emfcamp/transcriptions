Power to the people - Liberating online communication with matrix.org by Matthew Hodgson.
>> Hello, and welcome. Sorry, I'm too loud for that. Welcome to the next talk at EMF Camp. With me on stage is Matthew to talk to you about our latest and best hope for secure fed rate the communication. Please give a warm round of applause to Matthew! [Applause]. 
>> Hello, everybody. Can you hear me? Wonderful. Thank you for coming along to hear a little bit about Matrix. I guess before I get too deep into it, I should find out who knows what Matrix is already, and who doesn't? Show of hands for people who already are at one? Not that many people. Okay, about ten, 11 people. So, I'm afraid the next bit's going to be really boring for you, and we will have to go over some of the basics and to bring everybody else up to speed. First of all, I'm Matthew. I'm the tech founder of Matrix. We started doing this about four years ago to build a whole new decentralised communications network for the internet, and the idea to be end-to-end encrypt ed and completely decentralised so no power can have any power over the network. If you're talking to somebody using a different system on a different server, the conversation is completely replicated over those two servers. This is the important thing that everybody needs to understand about Matrix: IRP, has not done, the Matrix is very similar to Git. It's an entirely decentralised system. If I fire a server on my Raspberry Pi and start talking to other people, even if it might be AT & T or a government or something, the copy of the conversations are mine, and the data is replicated with cryptographic integrity over the other servers, so there is no single point of control at all. So that is basically the spoiler, main headline here of how we are liberating communication and giving the power of it back to the people. In practice, Matrix is an open network, and we're doing secure decentralised real time comms, and that is for any kind of communication. The typical thing we waste our life doing is instant messaging, interruptible chat but one is use it for VoIP, AR communication, world data and geometry, and DNA and AR, use it for IoT, if you wanted to have an open fabric which you can publish and subscribe to real time any old data. One of the early demos we did with Matrix was to hook up a car and its ODP port into Matrix, have it rattle around the network, and then do visualisations in a totally different system built on top of it. So why are we doing this? Well, it's a bit of a crazy moon shot to build a global decentralised encrypted comms network which is as ambitious as the web except optimised for real time communication because the web was always meant to be read-write, it's easy for the publishers to consume and it went a bit wrong in the web 1.0 days. If I want to publish stuff on the web, I have many different ways of doing it, whether it's Facebook, FTP, Twitter, or Mastodon, but theirs is no common language other than - with Matrix, we want to say I've got JSON data I want to\to somebody else in real time. Here is the simple ATP which can enable us to do that. I've seen others come along in a similar space but we are coming at it from a simpler - I will show you the APIs, and you can judge how complicated it is. If you have questions or thoughts, please interrupt because it will be more interesting than me going blah, blah, blah for the next half an hour. If anybody wants to steer things in a particular direction, like, "What about spam!" Or what about encryption or VR? Then yell it out. We can steer the talk how you wish or not. Matrix looks like this, or doesn't look like this, more accurately, because this is where we are today. With these silos, like Slack, Telegram, Twitter, or even an application like GitHub. The point of Matrix is to be a through that collects them all together, a centralised network of servers, and you have these blue bridges which take you through to other systems. You have native clients living on the Matrix side, and up so, you can use it in the bridging model but somebody on the free node can go and talk to somebody on a given slack by bridging it through Matrix or ignore the outside and have a native matrix client like Riot talking to another native Matrix client, like Sea Glass sitting on a server. The unusual thing here is that the conversations are replicated over all of the servers, so there isn't any single server that can go down and take the conversation. There isn't a single server which acts as a single point of failure. Instead, it's just like cloning a Git repository over the different nodes on the network. Made sense? Perfect. No single party owns the Convos. They're shared over everybody. Some people are saying, "Argh, how is this different to XonPP?" You're a horrible person going to hell? Neighbour thinking that? No, there's one person wondering why we reinvented. Vague ly wondering why we might have reinvented it. The answer is we haven't. Different philosophies and architectures. In XonPP, it's a federated protocol routing blobs of XML over the network, which it does a very good job of. Matrix is conversation history. It is not messages. We're sink knifing the history of chat rooms, or whatever the data is, across these servers. So, if anything, it's more like Couch DB, or Cassandra, or one of these consistently object databases. The fact that you can do pub sub with is fundamental where like git, we are replicate ing it around the place. Group conversation is the first-class situation. You don't get one-to-one messages in Matrix. If you get a room, you call it a one-to-one conversation if it two people in it. There's no DM or - also, end-to-end encryption re designed from the outset. It took us a few years to implement it, and it is still there as a kind of fundamental assumption that sometime now, we will turn it on compulsorily for all private communication for Matrix. You can other transports apart from JSON or HTTP, the lowest - the lowest common denominator that we provide is a web API, so send a message is an HTTP put, and to receive it is an HTTP fete. That's it. It's inefficient, but anybody can do it. You can send messages and receive messages using Curl. Finally, our big difference to XonPP is that we are about defragmentation and bridging. We're not trying to build another ivory tower, another castle in the sky which will be the one true communication network, instead somebody we are completely pragmatic, bridge to everyone else and provide glue between them and defragment the silos that exist today. I won't bang on too much about the problems inherent in siloed communication because I'm assuming I'm preaching to the choir, and everybody agrees it's a pretty bad thing that humanity has become helplessly dependent on Facebook, and WhatsApp, and Twitter as their ways of communicating. Let's take it as a given, perhaps, that it's not a good idea to empower people to control their own communication been pick their communication provider, migrate between their commune providers, and have a completely open standard, open-source, and non-proprietary, non-encumber ed model. Did anyone see anything about Better Slack a few days ago? Some guy went to wrote a browser extension to make Slack suck less. He called it Better Slack. I forget the features, but they were pretty cute. He had to reverse engineer the minified Slack source code in order to do fun stuff with it. He announced it on Hacker News, and it got 800 upvotes. Two notes later, Slack Legal shut him down completely for daring to undermine the integrity of their product, and blah, blah, blah. He's now looking at Matrix and Riot, but it was a classic example of problems of working on a proprietary system where they suddenly enforce their terms and conditions on you, and you're screwed. Even if you done something really useful and nice, I kind of wish he had been building on an open source platform and now he is. Architecturally, you get home servers. These feel like email servers. You run them on your VPS. You find a provider who is provide them to you. They contain your accounts, and your conversation history. The clients are very thin. As I said, it's plain old http talking back and forth here. It is an asymmetric protocol. The clients are stupid and simple to write. It is a curl one-liner. The servers are having to do this eventually consistent object database replication thing to replicate the conversations all the way around the place. They turn out to be hard, like a database implementation. Then you've got application services which are like clients with super user access to the server, so they can masquerade users, rooms, they could act act as bridges, act as any kind of filtering, or logging, whatever service, and then finally, we have identity servers which are the odd one out because we haven't sold identity yet in may terrorism. What we do is to identify people based on their email address, phone number, or anything else, and then we map it through to their Matrix ID which is intended to be opaque. That look-up directory sits in these logically centralised services. We're hoping somebody's going to fix the problem of decentralised identity, and we will move over to using it when that excerpt happens, but until then, it's the weak part of the architecture. This is the fun bit in terms of where things are at today: our main deliverable is the Matrix spec which is an increasingly scary single big document. One of the things which we do differently to, say, XonPP or others is that we just have a spec. It is not a bunch of extensions, a bunch of optional add-ons and chapters. It is one big document that gives you everything you could want to do. It's the got VoIP, end-to-end encryption, read receipts, typing notifications, this sort of thing. The advantage of having is in one place, if you have a server, and say it speaks Matrix 0.4, it does. You don't get the fragmentation, not sure if my client has implemented end-to-end encryption yet. If it is a compliant client, we have a baseline to decide what you need to do to speak Matrix. Historically, this has been unloved, shall we say, because, in practice, trying to get the right juggle between doing reference implementations and making sure the spec is really, really good is a nightmare because it at least doubles the amount of work also to get consensus from the community we are adding in a few feature into the spec, and all of this kind of logistical thing, but the good news is that in the last couple of months we've been working almost full-time on the spec and it's got a lot, lot better. If you have had the misfortune of looking in the spec in the past and thought this is a bit chunky, now you can look at it, as of last night, and see stuff looking better. I will talk about it in a bit. On the implementation side, server side, we have a Python server called Synapse, which is the original prototype. It is the main one out there, which sucks in many ways. It is a resource hog. We haven't optimised it as much as we would like. It works well enough. On the site site server, we have 40,000 users at any given point. It's possible to scale up to that level, and it's a couple of million accounts. Then we have Dendrite written in Go using a microservices architecture that scales out completely horizontally. It shamelessly rips off how hangouts works inside and should in theory be amazing other than the fact we have had to take people off it to focus on Synapse, because there are so many Synapses out there, and it's become quite mature, that we need to keep supporting it. Second-system syndrome, a bit like Netscape versus Mozilla back in the day, where we will focus on Dendrite but keep getting delayed by keeping the current stuff propped up. Synapse is usable today but uses more ram than you would expect. We have loads of different platforms, whether it is Slack, git, Telegram, WhatsApp, either we or the community has Britain a bridge. The purple stuff is the community. The green stuff is the core team. On the client side, we give completely separate stacks on Android, iOS and JavaScript. The lowest level is the web API wrapper. The next one up is the UX components, and the next one is the applications themselves written on top of it. The team also writes the Riot app which is a flagship app because things that went wrong in the past is open protocols don't have a flagship application. Xon - on Android, you had conversations. Before them, the cross-platform, there hasn't been the obvious client everybody has been using. On Matrix we wanted to build one, we called it riot, and it sits on top. Having native stacks here is if you want to embed into Android, iOS or the web, you've got different layers in which to go in it at, and you're not having to use react native where om - React Native. The bad news is that we do triple the work we do in any sane world because you have to maintain cell Go basis over all three platforms -- codebases. Enough talking, let's look at it. Yes? 
FLOOR:  [Inaudible]. 
>> A microphone is winging its way to you on angel wings. 
FLOOR:  Sorry to interrupt. I didn't see anything about embedded platforms and microcontrollers and things. Is that because it's straight http? Do you have a comment on that? 
>> From the server side, it is not well suited to embedded platforms because the servers today are chunky. The next gen ones should be better. The client side, you can use them on embedded platforms, and there's an ESP, and AT to whatever that processor is, base platform. In Matrix, it's like 20 lines of code. Luckily, it has an http client that works. Let's face it, most things have an http client these days. It's not perfect because it's http but good enough to control LEDs. I know a FBI who has his entire house lit by Matrix, and that kind of thing. More of the proof of concept phase. This is my personal Riot web sitting in one of our dev rooms. It is worth mentioning that Matrix scales quite well. I'm in 1,400 different conversations here. And if I go into a room like Matrix HQ, it's got 1,600 people in it. The rooms have gone up to 20 or 30,000 people. For something like Slack, we're in a whole different order of magnitude of scale, and complexity. We have read receipts. Typing notifications of course. Enough internet connectivity. People's faces start to Tetris grid as they read my message. Why doesn't Slack have read receipts? It's basic stuff here. It's useful to have the rich presence of seeing precisely what is going on. What else can I show you in here? If you look at the messages, you can look at view source and the underlying JSON. Here was it's pretty simple. Typically, it would be plain text. It's given HTML because I happen to knows he runs his own client which presumably isn't doing the optimisation to use plain text. There isn't any formatting. You get your time stamp, the room it's in, and the type of message. This is extensible. You put any JSON you like as long as you name-space it into a given time into the room. A more interesting thing might be, is there an image or something? Kept asking to be heckled? This is very sad. There we go. This is very better. I hope everybody appreciates the inception that's going on here. If you look at the slide from the talk, some view source on this, then it's a lot more interesting. We've got an you remember of an image here using the MXC schema which is a decentralised constant repository we have in Matrix. It is very simple, a full mesh of http hits so the people sync over http the message - sorry with the media of the message, and, it works well enough. You have metadata, et cetera. Apparently, something more interesting would be an end-to-end encrypted room. If we go to Megon Test, this has 193 people in it. We use it for stress-testing the end-to-end encryption because there are thousands of devices in the room. Typically, we see ten to 15 devices on average per user in Matrix. And if we go and look at one of these guys, the source itself, it's got the text on it, and then you - this is encrypted using Megon which is a rachet laid on top of Om, a clone of the double rachet that signals users. The way that encryption works is you stood up one-to-one rachets of the participants in this room, so 1,000 devices, but, then, over that, you share the key data for the group rachet called Megon. You only need to send one copy of the message, it has one session, and hopefully everybody has synchronised their keys such that they can decrypt that particular message. It is a hybrid between signal and a slightly more pragmatic group-based approach. I'm waffling and running out of time. Let me show you a different client. Let's look at another one. Got one here called Necko which I built last night. It will be enlarged like that. Okay. So this is Necko starting from scratch. It's on a test account with hundreds of conversations going on. It's written in QT by the community. It's led by a guy in Greece. It has end-to-end encryption in it, and it looks a lot like Telegram, and it's really nice. Obviously, I use Riot, because I work on that, but an increasing number of people are using this as a good native client. Also excitingly from my side, is Sea Glass which is a new client for Mac OS which eel uses the iOS SDK. Let me build it - there we go. It's built on top of the iOS but otherwise it's a native Cocoa app. Logging in as the same user, not quite as fast a load as the other one. Come on, come on, come on. Is it running in the background? Yes, there it is. Perfect. This is what Sea Glass looks like. Actually, it's kind of similar to Necko other - confuse everybody is it look at the Necko room at the Sea Glass room, which might make more sense. It is a native app. It looks really sexy on Mojave. That's the dark theme that you get on the new Mac OS. It's got a to see these clients coming to light. This one does the end-to-end encryption thanks to the piggy-backing we built for riot. All of these projects would love contributors. Find Matrix clients of your choice and make it amazing. Meanwhile, back on slides. What do you get? All the stuff you expect and the kitchen sink. I don't think there's anything missing, apart from reactions which are coming real soon now. Something else - edits. Edits for messages, both turn out harder than they should be. I will skip how it works. The actual API looks like that if the font is large enough, for people to read. They're doing an http post. If you're doing a web SQL call, you go to the immediate you want to talk, offer some media, the other guy answers it, and then you're in the call. If you have had the mispleasure.doing SIP or VoIP by any other technology, this what you can use. We did jamming over Matrix. We recorded the jamming sessions into Matrix and notated it which was fun. You've got the bridge in the third-party thing. People might know the S - where Randell said I have a hard time of keeping which chat systems that my friends use. We've given node stack. We have a just layer and a node to bridge IRC, Slack where, or anything Little bit Purple can speak. You end up having bridge nodes. You can even do it for things like IoT devices, and this was a fun demo until we broke the Tyrone where you would take the proprietary API that the drone spoke and took its video feed and its telemetry and its management of fly-by-wire stuff, and put it into the client, do a video call to the drone, and you would type launch, and up, and down, and left, and right, and the thing would fly around until is crashed into the audience. What else do we have here? End-to-end encryption. I glossed over that. New stuff, communities and widgets. So communities allow us to filter these massive sets of rooms down to the ones you care about, so it's a bit like flat teams or servers looking at rooms which are to do with the core Matrix team, or who wants to do a GSoc, or with Gnome. Widgets are really fun in that you can take any old room -- I'm trying to think after good room to demo in. If you're going to this, you have an app store of bots and bridges and things that you can add in, and a fun widget, any HTML page, Spotify, - Jitsy is a good example. If I press that button there, it will embed a video conference into the HTML widget, and everybody will see, hopefully, the conference pop up like that their client supports widgets. It's a way of co-ordinating I frames across the people, but it's - iFrames across the people. Let's see if anybody joins us. I hope they don't! It's useful in terms of building a dashboarding system into any chat room. If it was an ops room within imagine you had some of the dashboard in there, there is somebody else there! Hello, whoever you are. You look at if you're in this room based on the ceiling! I will kill that now, otherwise my laptop will run out of battery. That's an example of the widget, and I'm nearly out of time. What else shall I say in community status. France has a Matrix on a state level. They've gone and rolled it out across 15 of their ministries now, aiming for 35 by September, end of September. They've written their own Matrix client which is a very, very cute kind of end-to-end encrypted approach to doing this, and done a loft interesting stuff with anti-virus and the enterprise-y stuff you would expect if you were a government running on top of Matrix. If you want to run something not Slack, help us out. It's odd that a project like Matrix has been adopted by France but not the UK. In terms of growth. Users keep on going up. Traffic keeps going on up, other than the encrypted traffic which has grown slowly because the UX sucks. We are doing everything we can to fix it. Number of servers out there is at about 5,500 so not as big as the web. The number keeps going up. Matrix 1.0. We've been in beta for four years. Trying to get stable release at the end of August. As of 3 am, we got all of them out, apart from the Federation API. This is a massive, massive win. We've been doing lots of work on the spec which we wrote back in 2015, and then it trundled along, and then we've been right back at it to get it to a 1.0. The server-to-server stuff is nearly done. 26 issues left, nine in review. Lot of emphasis on security. You hear the Matrix is out of beta, and we've finally completely launched. Looking a lot less green, discord, hopefully a lot better, also on mobile looking like that. Lazy loading will e-R reduce by around a factor of five. You need to get end-to-end - and we need help! Please run a Matrix server, give us feedback, follow us on Twitter, and thank you very much! [Cheering]. [Applause]. . 
>> Perfect timing. Thank you very much. We can do a few questions. Because I want to test this new tool! 
FLOOR:  I was wondering about Git and issue-tracking integration. I'm aware that GitLab are starting to look at Activity Pub for that, and I wondered what the capabilities of Matrix are in that space, and what is planned? 
>> Our capability is to kick ass when it comes to issue-tracking investigation. When I go to an internal room when everybody is getting excited, I do exclamation mark, GitHub, create, "Hello, World", it will log in with my credentials and create that issue on the project which happens to be Riot Web as me. You can go and WebHook everything from GitHub. We live by it, and it's got bit bucket and other things too. 
>> If we keep it short, we can do two more and move it outside. 
FLOOR:  Got any news about the key verification changes. 
>> I skimmed over that slide. It was even the top thing of exiting beta end-to-end encryption. First of all, you've got incremental key back-ups, the PRs have almost landed, which makes it a lot harder to lose your keys. Then the new verification, QR codes, both fully designed and specced. We have the US workshop on Monday to lock down what it looks like, and implement it before we go mad. I'm sorry, but is sucks for so long. We will fix it. 
>> The short question part works already. The short answer part we work on. The last question, please. 
>> Thanks very much for the talk. Could you tell us your thoughts on machine-to-machine communication through Matrix? 
>> We want somebody to do it. We haven't been focused on it. It could be used very much for that. Http isn't great for it. Please do an NQT transport or a coapp transport. It helps if you need the encryption because it might be simpler to use - QT. 
>> Awesome, please give another warm round of applause for Matthew! [Applause]. EMF Camp is really short-staffed on helpers, so, if you leave, please take any trash with you that you find and put it in the trash can. If you could straighten out the seat rows, that would be awesome as well. If you have time to spare, please do sign up and help us making that camp even more awesome than it already is. Thank you very much. 