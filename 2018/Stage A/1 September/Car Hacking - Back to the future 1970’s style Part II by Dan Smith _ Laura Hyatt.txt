Car Hacking - Back to the future 1970’s style Part II by Dan Smith & Laura Hyatt.
>> Good afternoon, EMF Camp! Come on, good afternoon, EMF Camp! Good morning. We're just figuring out the last few technical glitches, so, relax, enjoy the still warm weather. This will change soon, probably. If - you guys in the back, in the emergency exits. Do you think it's a good idea to have seats in the emergency exits? Could you move them to the side, please? And leave the emergency exit as the emergency exit as it should be? Thank you.  We should not only have gone with a 1970s car but presentation mode - overhead projectors, handwritten stuff and chalk board. For the next iteration, think about that! If everything would be as reliable as a car from the 1970s, a MacBook from the 2000-somethings - 15s, apparently not.  As we do want this talk recorded, we try to get this properly set up.  So, while we are waiting, a little show of hands: who is at the EMF Camp for the first time? Hands up. Awesome.  Are you tried? Who froze to death in the first night or almost to death! 
>> Some people here have listened to talks ... . 
>> So, let's - who has seen the first iteration of this talk? Who has seen the 2016? A few. So you got new content for them? 
>> Yes, and I'm here now.
>> It's not only new content, but additional presenters. Awesome! 
>> Exactly! 
>> Complete different talk, way better than the last tile. 
>> Yeah! 
>> I've seen something? A little flicker? You can smoke your cigarette until the end. It still takes a minute. Awesome. 
>> Cool. 
>> So, let's get this good guy big. Big applause for our helpers setting up the audio and video equipment, please! [Applause]. Please welcome with a very warm round of applause, Dan and Laura, and Car hacking Back to the Future 1970s' style, part II. Hello? 
>> Hi, everyone. Welcome to the talk. This is Dan Smith and this is Laura Hyatt. Today, I will be talking about my continued journey on what I've been doing for the last couple of years. Sin  since I was here two years ago, last EMF. So, a little bit about me. I first attend ed EMF in 2014. I spoke at the last EMF which was the previous talk to this one. I'm an engineer working in automotive security. And you know, I a bit of a - I have a bit of a mixed background. It wasn't until recently that I discovered I'm now an engineer at heart. I have a background in computer science and also cars, and a few other things. For those of you who didn't attend the previous talk, I will quickly go over, give you context of what I've been working on, because otherwise it's not going to make much sense. So this is the car that I pretty much have worked on the last four years, like solidly. It is a 1974 Ford Escort mark I. It is my first car. It's still rocking the original 1.3 Ford engine. You know, some of the things I've done over the years, started off with a three-speed automatic gearbox, and then converted into a four-speed manual, and, to make it a bit more fuel-friendly, a five-speed manual in it. It mostly looks pretty stock, and it's got a stock interior. It is just an old car, really. And, slowly, over the years, I've added things to it. You know, the first thing that I did really was convert it over to fuel-injection. So this is my original set-up that I made a few years ago, four or five years ago. It was a single-point injection. There's one injector that serves all four cylinders, and I added a turbo to it. It's running 7PSI at boost, at three ECU, and it made about 120 horsepower with 130 pounds of torque. Yes, it's a fairly nippy car for that amount of power in a car that small and it doesn't weigh much. It was nippy up until the point it effectively melted the pistons a little bit. It's been off the road a few years now. This assist mega ECU, the - this is the mega ECU that is the computer for controlling the engine, does the calculations for the air, and controls the ignition coils. You can buy it preassembled or as a kit. I bought it as a kit. Came from the US. Soldered it together, got it working. Started the car. Pretty good. It's a fairly steepish learning curve to get your head around it. Once you know a little bit about cars and a little bit about embedded electronics, it is not too bad, and it's a very capable ECU if you're willing to put the time in to learn it, and it's cheap as well for what it is. So, kind of that summarises the previous talk, like all the things I did previously, and then in the last couple of years, this is kind of what I had done on the engine side. So I've gone from the single-point injection to multi-point which has been an interesting journey, so now there's four injectors for each of the cylinders, like you would find on a modern car. It's got an electric radiator fan, so the fan can be turned on at will at any time by the ECU when it needs it, handy on a cold day in the winter. Previously, you would start the car, and the fan would come on and start cooling the engine because it is directly belt driven. Now it doesn't come on until it needs to. It saves a bit of power. It has got electric water pump which is computer controlled by the CEU directly - ECU so it can make the decision to speed up or slow down the water pump. It has got a boost controller so it can change the power, the turbo's outputting when you're driving because you can dial the power down when it's on the motorway, when you're overtaking because you get wheel spin quite easily, and there's no tracks or anything. - traction or anything. It's got a few sensors to make the drivability better, a mass sensor, IAC control valve which makes it easier starting on the cold day. I'm currently working on putting the clutch switch in it so you can have launch control - and it's got extra sensors dotted around the engine bay. The last time the engine went kaput, I didn't have enough data or sensors which indicated where the problem was coming from. I've added them in. That information is there and you can do a lot with it. Other things I've been working on. I've mainly been fabricating parts a lot over the last couple of years. The big game-changer for me was I've been using 3D printers for a while, but it wasn't until about 18 months or so ago that I actually got one at home, and as soon as I got one, it just changed how I worked altogether. I was no longer having to spend so much time fabricating parts out of aluminium and steel. It was more time was focused on actually designing the parts, and perfecting that design, and then once it was right, it was clicking the button, print, and off you go. I've been using that for lots of different things in the car which I will cover now. So, originally, I just started using it to prototype parts to go in the engine bay, like brackets, and holders, and clips, and things like that. Nothing that I might use or might not use it. If it breaks, it doesn't matter. I quickly moved on to do enlarger parts. In the photos there, everything that you can see in red has been 3D printed. And the main part that you can see is the intake man folds, and part of the turbo plenum, and that's been designed using Fusion 360. The reason why I designed it was because those parts that I need are not available off the shelf for that engine, so I have to make it myself. If I pay someone else to design it and make it, that costs a lot of money. So I designed it myself using Fusion 360. The measurements were taken using measurements from some of the original Ford manifolds and adapted. It's mated to a CosboYE turbo Plenum, and using the 3D printer to iterate the design quickly and test out new ideas was greatly beneficial. Ultimately, the model that I designed, I put so many hours in, I was able to send over to a fabricator, and they were able to use the same model to make what I designed out of aluminium. So the bits that were red in the previous slide, they're there are now made out of metal, aluminium, and the design is literally exactly the same as the 3D printed model that I made. The reason why I didn't use the 3D printed model is because it might work for, like, two minutes but plastic bolt the directly to a hot engine with pressurised air going through it probably isn't a good thing to do. Ig nor the engine in that photo. That's a scrap engine. I put that in there because the engine I blew up I took out. I put that one in so I had something for reference points because I've got to make a new wiring harness, so I put it in to get all the wires perfectly to length. Kind of then moved on to deal trying to use the 3D printer to make functional part that we would actually be used in the engine, when the car's running. So the part that I made there is an adaptor that goes in between the body which is 48ml bore to a CosworthIB frontal body which is 55ml. This part will be under pressure. It won't have any fuel or anything near it, but it will be under pressure. It will be very close proximity to the engine. Lots of heat and lots of vibration. You know, external weather, all sorts of nasty things. It's got to be sealed on both sides, so it has to be ideally perfectly flat with an O-ring on the one side to stop any boost leaks, otherwise you're just throwing power away. So it has also got to have some bolts threaded into it, because the actual body has got a mount to it, and it's got to be held. And I haven't done the final version yet, but the final version will be printed using carbon fibre - carbon X filament which I think is from the States, and that's carbon fibre reinforced nylon that supposedly passes the P A66 spec which is commonly used for plastics in the engine bay. So it might last. It's a simple enough part. I can always carry one in the engine in the car with me if it ever went, and I can change it on the side of the road, or I could just get it machined out of aluminium. But, I kind of want to try doing a functional part, and 3D printing a plenum or an intake is too risky. This part is simple enough that I might as well try and see what happens, and I know people have done 3D printed parts with natural aspirated engines but I've not seen anyone do anything on a turbo, I thought why not? I might as well try. The part that's the design on the left, just for reference, then on the photo on the right, it's just behind the throttle body. It's the slightly dark grey, you can kind of see it, so, yes, that's got to be - that's in PLA at the moment just for photo typing because it's cheap, but that will be in carbon fibre. We will see how that goes. Other things I've worked on, 3D printing, this has been quite useful. I've actually used it to re produce proprietary Ford connectors that were manufactured a long time ago in the 1970s. You know, you just can't get them any more. The main connector, the most interesting one, is the main engine firewall connector which is a sealed unit, and made out of some kind of rubber when Ford made it and it came from the factory. When they stamped it together, it fused, you can't get it apart. It looks fairly watertight, so, if you kind of go in there and start cutting it, you're going to probably like reduce the liability of that section of the harness, and considering it is the main one, not a good thing to do. So I got my callipers out and measured it all over, and started putting together a design of my own. It's worked pretty well. Using flexible filament from the States by company called Ninjatech using the Cheetah filament, strong and resistant to oil and fuel, and it's got a high strength rating. Yes, I'm actually able to reproduce some of these connectors that you just can't get any more. And that's very, very handy. And I've actually sold a few of those because there are people that are interested in it, and you can't get them. So the other thing that I have been working on as well, which I previously talked about in my previous talk, is the digital cluster that I built. So this is how it looks today. Literally, I took that photo today, and I brought it here with me. It's still pretty much a prototype but I've sunk a lot of hours into it. It's definitely been an interesting project to learn and work on. Hard work prototyping, designing, fabricating, and a lot of software as well. So, it's the running a Raspberry Pi 3. Every time they release a new version, I just take the old one out, put a new one in and bet enhanced performance. It's got a couple of stacked Raspberry Pi shields on it. The first one is again off-the-shelf product, a Sleep y Pi two, the power board, effectively. It maintains a state machine. The current state of the vehicle ignition, so it knows when the ignition is turned on or off. When it is on, it effectively turns the Raspberry Pi on, starts booting it up. When the ignition state has been lost, after ten seconds, it starts a clean shutdown. That can be turned on independently. If the power management decides it wants to turn on, it can turn it on. The rest of the car can be turned off. So, you know, if you want to remote into the car and start it up, that makes that possible. The other shield is the PiCan2 allowing the Raspberry Pi to communicate via a CAN bus. You can negotiate what you want from the screen, RPM speed, all the sensors, et cetera, and the other bit I've added, I've bodged in some perf board, and that allows me to accept some of the more analogue vehicles, signals and inputs. From the indicators, the amount mater, and the main beam, and that allows me to show the graphic upon the screen as with the original cluster. The software, it's pretty custom but again it's kind of six once you've got your head around it. I'm using tool chain called Build Route to build a customised image of Linux that's running a fairly recent kernel. They release updates every quarter. Every quarter, you get a newer kernel. They do an LTS release which I'm currently using. The GUI components for the cluster, what you see is made up of QT5 and PyQT - used for prototyping. The boot time to on working is about five seconds. I haven't spent much time trying to optimise it. I'm sure you could get that down if you wanted it. Getting rid of PyQT and going over to native C++ would improve that. If  it is all linked into GitLab. I have runners at home. Any time I make a change, it kicks off a build, and an hour later, I have the finished image that I flash straight on to the Py. The build route is awesome. I really like it. For anyone who has Raspberry Pi, they want to get their hands in a bit more, they want to get a bit more dirty, but, you know, without going full on from scratch Raspberry Pi edition, those are the commands that you need to get a custom Linux running built using Buildroot. It is very, very simple. Once those commands have ran, after an hour, flash it, the documentation that they have is very, very good. It's pretty easy to understand once you start to think around that a little bit. So I built the stash. It functions fine as a prototype. I wanted to test it more than on the bench, on the bench, everything worked fine, but in the real world, I know there are unexpected problems that you run into. But the car that it was built for didn't have an engine that ran, so I needed something to do, so I just took my daily driver, which is a Mondeo, and took a couple of tools that I had, a CAN hack and a Panda, and I reverse the CAN signals for the RPM and the speed, and I then went into my cluster code and altered those IDs, flashed it, and bodged together very crude model, printed it, and combined it with some hot glue, and shoved the dash in there. Just bodged together like an OBD little connector that plugs into the OBD port, and I ran that for two months. Daily. My primary concern was at night, it would be too bright, and, you know, it - you wouldn't have much visibility, but everything worked out fine. When the engine eventually drops back into the car, they'll be going in. There is actually audio, but it's playing from here. Yes, you can see it. You can see it revving. It's got no lag whatsoever. It's really responsive. That's just the OBD down there. I think that's me done. That's the more hands-on side. The fan indicating, the engine, and the car, and is the electronics, and the wiring. But another bit that I wanted to do was actually start connecting the car online, and that's where Laura comes in to talk about some basic telematics to remotely control the car. [Applause]. 
>> Yes, that's me. I'm going to be talking briefly about how I incorporated it into the car. To give you context about why I'm here, so, I kind of have been on an journey, I guess this year. So, in January, I got my practitioner certification. In May, I did my architect associate, and then about three or four weeks ago, I got the developer associate, so, really for the last year, because I've been studying beforehand, I've been learning about AWS. Dan wanted to connect the car online, and so he was, like, why don't you get involved with it, then and use the skills you've been learning to help me out. This is why I'm here. I'm go to briefly talk about Green Grass. I'm sure many of you have used AWS but has anyone used AWS Green Grass before? That's good! One person! And that's good, I was worried I would be preaching to the choir here. But essentially, Green Grass is a service that allows you to run AWS locally on connected devices. You could run a lambda function in Python, Node.js and run it locally on your Raspberry Pi. The reason why this is good is that it means you can connect to physical hardware, so you can use a lambda function to trigger GPI opens. You can see why this could be useful in a car, for example. So we obviously have used a Raspberry Pi to power the car. The AWS project that we did, there were three that we wanted to do before this talk. Obviously, we are going to do some more following it, but there was a limited amount of time. Now, I just want to point out that two of them used Green Grass and one doesn't. It works and it's fine but runs locally on a Pi. Greengrass runs in sandbox, and there are limitations with that. I will explain more the details in a minute. The remote engine start, my favourite, the first one I did. You can remotely start the car engine from anywhere in the world is how it works. The GP St Tracker was the next one we did. Because, obviously, it is a classic car, Dan has spent so long working on this. Imagine if it was stolen? He would be devastated. We wanted to track the car in real time. The final one was car telematics using CAN. This is the one we didn't get working in Greengrass. We will continue working on it, we couldn't get the CAN Python module to work with Greengrass but we have it working locally on a normal Python script on the pi. Let me explain the remote engine start. I will show you a brief video because I don't have a car here to give a demonstration. Here's a video I filmed a couple of weeks ago. Sorry, the audio is not great.
[Video] apex to AWS which then connects to Greengrass locally on the Pi. This triggers a lambda function locally on a Pi. I wrote that in Python. That turns on a relay port. It starts the car; it goes.  [Applause]. 
>> Thanks. So, yes, that was my first thing that I did, so, obviously, it's like my baby, and I'm really, really proud of it. Kind of I'm on a AWS journey at the moment. Essentially, like I explained, Greengrass is installed locally on the Pi, and then that obviously connected the GPI to the relay board which is then connected to the starting motor. Basically, I wrote a simple Python script on lambda. All it is is an on-off switch about this big, lines of code. And when it runs, the lambda function is executed locally on the Pi and that basically turns on the relay board which then starts the engine motor. It is actually a pretty simple concept, but obviously it's a cool idea. Then essentially to make it truly remote, I could basically configure an IoT button. There is a picture there. I don't know if you've used one of these before? It's the Dash, but I configured that, so, when the button was pressed, it would execute the lambda function. What this kind of means is that I could have the button with me say, in Australia, and as long as I'm connected to the Wi-Fi, or 4G, and obviously the Pi is turned on, press that and the car could be in England, and it would remotely start. It's a cool thing, that's what we did first. With this we moved on to a GPS tracker. Now, we've got a GPS receiver - receiver connected to the Raspberry Pi. Greengrass installed on Pi using a GPS Python module, wrote a small bit of code. Eventually outputs longitude and latitude co-ordinates of the car in real time, wrote it that it does every five seconds because every second it kind of gets a bit crazy, and you can't really read anything. So that's what essentially that does. And then I think I kind of mentioned the telematics using CAN, whilst not using Greengrass, obviously, we've got that data, so things like RPM. Obviously, all this data is great but it's kind of in its raw form. You have longitude and latitude spitting out. If the car is stolen, it's not very useful just to see longitude and latitude co-ordinates, changing if the car is moving, so we need some way to visualise this. This is where it leads on to Freeboard. This is an open-source bit of software whose purpose is to visualise IoT data. This is running into my account. At the top, then the GPS co-ordinates are now a Google map. So this will update in real time, and the pin will move as the car moving. What we did was I had my laptop on my lap with the Raspberry Pi plugged in and the GPRS receiver, and we drove around our town. The pin was moving. It's great. Hopefully, it doesn't get stolen, but if it does, you can track it on a map. As you can see below, these are the car telematics, you've got RPM, for example, and those little sliders. Again, they update in real time, so you put your foot down and the RPM moves. The slider moves like this. It is a great way to visualise your IoT data. That wraps up things that I've been doing. Obviously, I will be working on other things in the future. But I just like to say that Greengrass is a great way to sort of bring AWS capabilities to physical hardware, so there is lots and lots capabilities with this, and you don't have to use it on a car but other things - turn on the old lamps, and stuff at home. I hope it's inspired you to use maybe check out AWS Greengrass after this, and yes, I hope you've enjoyed the talk. Thank you. [Applause]. 
>> Thank you. You almost did it in time. Perfect. Thank you very much. So, as we are pressed for time, questions and answers, you will do outside? On the side of the tent. If you are leaving, please take a look around you and take any trash you find with us, and deposit is in the trash can. EMF Camp needs your help? Who wants beer? Who wants the bar to be open this evening? Please consider going to the bar. Go to the website, sign up, and then select a shift. Please volunteer. If you don't like beer, we have other options. We have people who need it on the entrance tent, peopled needed to help do jobs like this. If you volunteer, for more than three hours on a day, you get food! We have excellent catering! If you like the food, please also consider possibly helping us by washing up or helping cook it. Everyone here is a volunteer, it does not run without volunteers. Please, please, please, if you have a spare moment, just go up to the volunteer lounge to see if they need anything. Thank you. 