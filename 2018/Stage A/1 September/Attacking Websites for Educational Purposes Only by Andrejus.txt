Attacking Websites for Educational Purposes Only by Andrejus Kostarevas.
>> I think we're there. I would first like to welcome our first speaker, Andrejus Kostarevas who will be talking about attacking websites for educational purposes only. [Applause]. 
>> I'm sorry for the delay. It's the first time I had no clue what was going on. Shout-out for the tech team at the back for really calling it through. This is about attacking websites for educational purposes only. It's my first talk, so don't murder me, please! What do you mean by "educational purposes"? I'm a student at the University of Readying. In our second year, we have an information security module, and the course work for that is to set up a web server and break into it, patch it up, and just write a master report the entire way through. So, my initial submission came in the form of a really boring 25-page report without references. So, I've upgraded that into a talk, so, you can scan that QR code to get a local copy of the slides. If anyone has trouble reading, go for it. Now you will get another bonus crash course in information security as well, and I won't be able to demo any client-side exploits because I'm not running windows any more. I might be ripping my lecture off. If you're here, John, thanks a lot. Beginning with a quote:
"The only true secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards," and even then, Jean wouldn't put his life on it. That's an - this leads on nicely to the CIA, which is what you want your information to be. It is confidential, integral, and availability. Confidentiality means that people who should not have access don't have access because you wouldn't want your files to be accessed by someone that's not allowed to be that. You don't want people to change your data while you're not looking at it essentially, or, if they are changing the data, you want to be able to find out. Lastly, you want to access your information, so the example we gave earlier, yes, it's confidential. It's integral. No-one can access it, but you can't access it, either. Demo is the trade-off again between security and usability really well. A question that gets often when talking about information security is how much should I actually worry? You could ignore security entirely and broadcast your credit card information on the EMF's insecure network. That's quite bad. You could get really paranoid and start using SHA256, for example, so send emails to your mum, or use Messenger which is a bit inconvenient. Another question that gets asked is: who actually cares about my data? So, there are people, hackers, social engineers, some people just want to mess with you, essentially. And what do they get out of it is usually money. Sometimes, they do it for fun. Sometimes, they do it for money at the end. And the main question I'm hoping you came to see here is how do they do it? So, a lot of software has human errors built into that which usually leads to vulnerabilities. I forgot to put this in the slide, sorry. If someone uses a vulnerability in an exploit, they can get intrusion into your system, and that's when they can actually get access to your data. So, we're going to look into how to do stuff like this now. Before I do this, looking at you, Rich, it comes with a massive warning, so the stuff here shouldn't be used for malicious purposes. Back in uni, we got told that if you use this, you will get suspended from uni, but I don't think this applies to most of the crowd here. There's something about laws as well in the UK, so, like, be careful. There are two main ways of finding vulnerabilities. You can either discover your own, so, if you're working with open-source software, you can read through the source code, identify said human errors, and then see if tuck make something of it. If it is closed source like Google or Facebook, you can text all of their APIs, all of their interfaces, and it involves a lot of thinking outside the box. That's why security analysts get paid massive amounts. Obviously, when you find a vulnerability, you usually disclose it responsibly, so you don't make it public, you give it to the company involved. They usual have ... involved as well, as a way to get some money. What I'm doing here, or in the report, is using vulnerability databases. A lot of software that gets analysed, they get assigned common vulnerabilities and exposures. What kind of permissions do you need? What kind of privilege use do you gain out of it? It's usually like low to high rating. That gets through a lot of algorithms and spits out a number between zero and ten where Pi numbers lead to really scary vulnerabilities. So, on the right, there's an example of the distribution in one of the vulnerabilities databases. Let's do it. We will be looking at phpBB - quite an old form system. Peep peep is a free and open source software, he's a to use, powerfully, and highly customisable, but the version we're looking at today is really - there you go - a really specific release candidate version of phpBB, so it has, if we look at the security vulnerabilities, so here's an example of all of them for phpBB, here's one for iOS, for example, the one we are looking for phpBB is scored 10. It lets you pretty much gain shell access to the system, and you can just run the code remotely, so it's called a remote code execution vulnerability. So, the reason I needed the screen so badly is because we're doing a live demo today.  So I have a copy of phpBB running somewhere in the world. It's publicly exposed. More on that later.. you can navigate the form software. It looks a lot like the 2000s because it is from the 2000s, to the point where it even has funny images. So that's the victim server running. That's vulnerable, and we're going to see if we can execute some code remotely. So, if I get access to my attacker server, the only reason I need an attack server is so I can have files available publicly, because I can't expose them on my EFF - EMF network. The way we find it is if you look at the source code for this version of phpBB, you will notice that this script in particular /include/phpBB, if you access it, throw some errors, that's what you don't want your web server to do. If you're including a file from another file, you set safeguards, like, if someone is receiving that file directly, they shouldn't get access to it. A funny thing with phpBB is you can give it variables through URLs. So, for example, here it's freaking out that we didn't divine a database management system, so we can tell it use MYmySQL, for instance. If you look at the source code for phpBB, the root path variability tells phpBB where to load the files from, so, if we, for instance, set the root path to /home, for instance, in Linux, that is your home directly, it will try to load /home/ ... phpBB which isn't a valid path because it's somewhere else. What this web server has with it vulnerable on top of that is that it lets you access files from other servers. If I go to my attacker server, and then spin up an HTTP server in the public, then I can, for example, access it from my browser, then you can pass that link and code it to URL stuff. If you pass it as a variable, it will actually load the files from the web server, so I had some stuff set up already. I re name - this will come in later. So, now, if I spin up the HTTP server again, and  tell it to load the request, since it's a different file, that file which is on my attacker server should executed on the victim server. For instance, what you can do is is a file. For instance, we can put down PHP info as the script we want to execute. This usually just displays all of the information about the local version of PHP - and, just like that, the victim server executes code. So the file I had in there before actually spins up a reverse shell. If anyone is familiar with Linux, the screen I have on the right is my local shell so I can execute commands on the local server. If I delete the file I just made, and if my reverse shell file back to where it was, then I spin that up, and set up a listener. On my attacker server, I'm now trying to listen for incoming shell packets, and, if I go here again, it will pretty much give me full access to the victim's server, so I can do stuff like go to the server running there and go into the document store. Then, for example, touch a file. To go to my EMF victim, for example, emf.html, it's not available, but if I touch Permission Denied, oh, ... . Where I just set up, so it gives me full read access instantly. There you go. Just like that, a file has been made. Since this is a really funky shell in that it gets streamed like PHP like it does fancy packet stuff, you can actually use a file editor, when you could echo "hello EMF" into a file denied. It doesn't let you do things, and my listener just broke. That's okay, because I programmed my badge to - if I click on the badge, this is the 0.18 badge by the way, if I do that, it should give me an access like that from my badge. [Applause]. That concludes the live demo of how to hack a website from your EMF badge - be sure to pick these up today! Why should you care about stuff like this? So lack of security is a defect in software, and, fixing a defect is changing requirements most of the time. And we get taught this a lot in computer science that the later you change your requirements, the more effort it is, so, it's usually helpful to consider security very early on to make sure stuff like this doesn't happen, because having your website broken by a badge is quite embarrassing! So, one last thing: I went ahead and took the liberty of exposing this web server publicly, so, if you type this in your phones, you will get access to the phpBB forum. You can post stuff on there. Please don't use your real credentials on there. I think I set it up so you can post without having to register. Then I've set up a bug bounty, so I've sent a message from my personal phpBB account to the admin account. It has a certain message to it. If you find me later today and find me what - and tell me what the message is, you will get an Android Lego, a puzzle bot. Anyone else who does really cool gets a Google to know. I've got some of those, and tons of Android stickers for some reason, so feel free to approach me. So, I would like to thank the entire team at EMF 2018 for accepting my talk, essentially. Thanks to the guys at Think Engineer for letting me work on this presentation during work time, and then all of you for putting up with the 30-minute delay! [Cheering and Applause]. Since we have four minutes, I can open myself up to questions. Does anyone want to ask a question? 
>> Hold on. 
>> You can throw it! 
FLOOR:  Is there much exploitable phpBB still out there? 
>> Maybe! You can find out. [Laughter]. This version shouldn't be anywhere in the public except here, obviously. Because it's a really specific release candidate version that, like, I think it was only live for like a day or so, and, if anyone downloaded it, they were on the edge, essentially, so they've probably updated it since then, hopefully. . 
>> Before we go, then, I'm sure Andrejus will be around. It's also his birthday today. Give him a quick happy birthday! [Cheering]. And then we will get on with the next talk. Thank you very much. 
>> Sorry about the delay. [Applause]. 